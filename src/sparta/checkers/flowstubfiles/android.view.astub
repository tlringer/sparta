package android.view;
class Gravity {
static final int LEFT;
static final int TOP;
static final int CENTER;
static final int RIGHT;
static int getAbsoluteGravity(int gravity, int layoutDirection);
static void apply(int gravity, int w, int h, Rect container, int xAdj, int yAdj, Rect outRect, int layoutDirection);
static void apply(int gravity, int w, int h, Rect container, int xAdj, int yAdj, Rect outRect);
static void apply(int gravity, int w, int h, Rect container, Rect outRect, int layoutDirection);
static void apply(int gravity, int w, int h, Rect container, Rect outRect);
static void applyDisplay(int gravity, Rect display, Rect inoutObj, int layoutDirection);
static void applyDisplay(int gravity, Rect display, Rect inoutObj);
}

class KeyEvent$DispatcherState {
boolean isTracking(KeyEvent event);
void startTracking(KeyEvent event, Object target);
}

class ScaleGestureDetector {
boolean isQuickScaleEnabled();
void setQuickScaleEnabled(boolean scales);
}

class ViewTreeObserver {
void addOnWindowAttachListener(OnWindowAttachListener listener);
void addOnWindowFocusChangeListener(OnWindowFocusChangeListener listener);
void removeOnWindowAttachListener(OnWindowAttachListener victim);
void removeOnWindowFocusChangeListener(OnWindowFocusChangeListener victim);
}

class AbsSavedState{
            Parcelable getSuperState();
            void writeToParcel(Parcel dest, int flags);
}
class ActionMode {
    
abstract void finish();
//Finish and close this action mode.

abstract View getCustomView();
//Returns the current custom view for this action mode.

abstract Menu getMenu();
//Returns the menu of actions that this action mode presents.

abstract MenuInflater getMenuInflater();
//Returns a MenuInflater with the ActionMode's context.

abstract CharSequence getSubtitle();
//Returns the current subtitle of this action mode.

Object getTag();
//Retrieve the tag object associated with this ActionMode.

abstract CharSequence getTitle();
//Returns the current title of this action mode.

boolean getTitleOptionalHint();

abstract void invalidate();
//Invalidate the action mode and refresh menu content.

boolean isTitleOptional();

abstract void setCustomView(View view);
//Set a custom view for this action mode.

abstract void setSubtitle(int resId);
//Set the subtitle of the action mode.

abstract void setSubtitle(CharSequence subtitle);
//Set the subtitle of the action mode.

void setTag(Object tag);
//Set a tag object associated with this ActionMode.

abstract void setTitle(CharSequence title);
//Set the title of the action mode.

abstract void setTitle(int resId);
//Set the title of the action mode.

void setTitleOptionalHint(boolean titleOptional);
//Set whether or not the title/subtitle display for this action mode is optional.



}
class ActionMode$Callback{
            boolean onPrepareActionMode(ActionMode arg0, Menu arg1);
            boolean onCreateActionMode(ActionMode arg0, Menu arg1);
            boolean onActionItemClicked(ActionMode arg0, MenuItem arg1);
            void onDestroyActionMode(ActionMode arg0);
}

class CollapsibleActionView{
            void onActionViewCollapsed();
}

class ContextMenu {
    
abstract void clearHeader();
//Clears the header of the context menu.

abstract ContextMenu setHeaderIcon(@Sink(DISPLAY) Drawable icon);
//Sets the context menu header's icon to the icon given in icon Drawable.

abstract ContextMenu setHeaderIcon(int iconRes);
//Sets the context menu header's icon to the icon given in iconRes resource id.

abstract ContextMenu setHeaderTitle(@Sink(DISPLAY) CharSequence title);
//Sets the context menu header's title to the title given in title.

abstract ContextMenu setHeaderTitle(int titleRes);
//Sets the context menu header's title to the title given in titleRes resource identifier.

abstract ContextMenu setHeaderView(@Sink(DISPLAY) View view);
//Sets the header of the context menu to the View given in view.



}

class ContextThemeWrapper {
        void setTheme(int resid);
//void applyOverrideConfiguration(Configuration overrideConfiguration);
//Call to set an "override configuration" on this context -- this is a configuration that replies one or more values of the standard configuration that is applied to the context.

Resources getResources();
//Return a Resources instance for your application's package.

Object getSystemService(String name);
//Return the handle to a system-level service by name.
//CSH: Should be PolyX

//Resources.Theme getTheme();
//Return the Theme object associated with this Context.

//void setTheme(int resid);
//Set the base theme for this context.

//Protected Methods
//void attachBaseContext(Context newBase);
//Set the base context for this ContextWrapper.

//void onApplyThemeResource(Resources.Theme theme, int resid, boolean first);
//Called by setTheme(int); and getTheme(); to apply a theme resource to the current Theme object.

}

class Display {
    
    
void getCurrentSizeRange(Point outSmallestSize, Point outLargestSize);
//Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size.

int getDisplayId();
//Gets the display id.

int getFlags();
//Returns a combination of flags that describe the capabilities of the display.

int getHeight();
//This method was deprecated in API level 13. Use getSize(Point); instead.

void getMetrics(DisplayMetrics outMetrics);
//Gets display metrics that describe the size and density of this display.

String getName();
//Gets the name of the display.

int getOrientation();
//This method was deprecated in API level 8. use getRotation();

int getPixelFormat();
//This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888.

void getRealMetrics(DisplayMetrics outMetrics);
//Gets display metrics based on the real size of this display.

void getRealSize(Point outSize);
//Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors.

void getRectSize(Rect outSize);
//Gets the size of the display as a rectangle, in pixels.

float getRefreshRate();
//Gets the refresh rate of this display in frames per second.

int getRotation();
//Returns the rotation of the screen from its "natural" orientation.

void getSize(Point outSize);
//Gets the size of the display, in pixels.

int getWidth();
//This method was deprecated in API level 13. Use getSize(Point); instead.

boolean isValid();
//Returns true if this display is still valid, false if the display has been removed.

String toString();
//Returns a string containing a concise, human-readable description of this object.



    
}

class FocusFinder {
    
View findNearestTouchable(ViewGroup root, int x, int y, int direction, int[] deltas);
//Find the nearest touchable view to the specified view.

final View findNextFocus(ViewGroup root, View focused, int direction);
//Find the next view to take focus in root's descendants, starting from the view that currently is focused.

View findNextFocusFromRect(ViewGroup root, Rect focusedRect, int direction);
//Find the next view to take focus in root's descendants, searching from a particular rectangle in root's coordinates.

static FocusFinder getInstance();
//Get the focus finder for this thread.



}

class GestureDetector {

        GestureDetector(Context context, OnGestureListener listener);

GestureDetector(OnGestureListener listener);

boolean isLongpressEnabled();

boolean onTouchEvent(MotionEvent ev);
//Analyzes the given motion event and if applicable triggers the appropriate callbacks on the GestureDetector.OnGestureListener supplied.

void setIsLongpressEnabled(boolean isLongpressEnabled);
//Set whether longpress is enabled, if this is enabled when a user presses and holds down you get a longpress event and nothing further.

void setOnDoubleTapListener(GestureDetector.OnDoubleTapListener onDoubleTapListener);
//Sets the listener which will be called for double-tap and related gestures.

    
}

class GestureDetector$OnDoubleTapListener{
        boolean onDoubleTapEvent(@Source(USER_INPUT) MotionEvent arg0);
        boolean onSingleTapConfirmed(@Source(USER_INPUT) MotionEvent arg0);
        boolean onDoubleTap(@Source(USER_INPUT) MotionEvent arg0);
}
class GestureDetector$OnGestureListener{
        boolean onScroll(@Source(USER_INPUT) MotionEvent arg0, @Source(USER_INPUT) MotionEvent arg1, @Source(USER_INPUT) float arg2, @Source(USER_INPUT) float arg3);
        boolean onFling(@Source(USER_INPUT) MotionEvent arg0, @Source(USER_INPUT) MotionEvent arg1, @Source(USER_INPUT) float arg2, @Source(USER_INPUT) float arg3);
        void onShowPress(@Source(USER_INPUT) MotionEvent arg0);
        boolean onSingleTapUp(@Source(USER_INPUT) MotionEvent arg0);
        void onLongPress(@Source(USER_INPUT) MotionEvent arg0);
        boolean onDown(@Source(USER_INPUT) MotionEvent arg0);
}

class GestureDetector$SimpleOnGestureListener{
        boolean onDoubleTap(@Source(USER_INPUT) MotionEvent e);

        boolean onFling(@Source(USER_INPUT) MotionEvent e1, @Source(USER_INPUT) MotionEvent e2, float velocityX, float velocityY);
        SimpleOnGestureListener();
        boolean onDown(@Source(USER_INPUT) MotionEvent e);
}

class KeyEvent {

        static final @Source(USER_INPUT) int KEYCODE_BACK;
        static final @Source(USER_INPUT) int KEYCODE_SEARCH;
        static final @Source(USER_INPUT) int KEYCODE_SPACE;
        static final @Source(USER_INPUT) int KEYCODE_TAB;

        static final @Source(USER_INPUT) int KEYCODE_VOLUME_DOWN;
        static final @Source(USER_INPUT) int KEYCODE_DPAD_CENTER;
        static final @Source(USER_INPUT) int KEYCODE_VOLUME_UP;

       final @Source(USER_INPUT)   int KEYCODE_F;
       final @Source(USER_INPUT)  int KEYCODE_Y;
       final @Source(USER_INPUT)  int KEYCODE_DPAD_DOWN;
       final @Source(USER_INPUT) int KEYCODE_V;
       final @Source(USER_INPUT) int KEYCODE_W;
       final @Source(USER_INPUT) int KEYCODE_B;
       final @Source(USER_INPUT) int KEYCODE_C;
       final @Source(USER_INPUT) int KEYCODE_L;
       final @Source(USER_INPUT) int KEYCODE_G;
       final @Source(USER_INPUT) int KEYCODE_I;
       final @Source(USER_INPUT) int KEYCODE_2;
       final @Source(USER_INPUT) int KEYCODE_6;
  final @Source(USER_INPUT) int KEYCODE_DPAD_RIGHT;
  final @Source(USER_INPUT) int KEYCODE_N;
  final @Source(USER_INPUT) int KEYCODE_Q;
  final @Source(USER_INPUT) int KEYCODE_T;
  final @Source(USER_INPUT) int KEYCODE_K;
  final @Source(USER_INPUT) int KEYCODE_A;
  final @Source(USER_INPUT) int KEYCODE_D;
  final @Source(USER_INPUT) int FLAG_SOFT_KEYBOARD;
  final @Source(USER_INPUT) int KEYCODE_5;
  final @Source(USER_INPUT) int KEYCODE_U;
  final @Source(USER_INPUT) int KEYCODE_4;
  final @Source(USER_INPUT) int KEYCODE_J;
  final @Source(USER_INPUT) int KEYCODE_O;
  final @Source(USER_INPUT) int KEYCODE_M;
  final @Source(USER_INPUT) int KEYCODE_1;
  final @Source(USER_INPUT) int KEYCODE_MINUS;
  final @Source(USER_INPUT) int KEYCODE_Z;
  final @Source(USER_INPUT) int KEYCODE_8;
  final @Source(USER_INPUT) int ACTION_UP;
  final @Source(USER_INPUT) int ACTION_DOWN;
  final @Source(USER_INPUT) int KEYCODE_S;
  final @Source(USER_INPUT) int KEYCODE_DPAD_UP;
  final @Source(USER_INPUT) int KEYCODE_DPAD_LEFT;
  final @Source(USER_INPUT) int KEYCODE_PLUS;
  final @Source(USER_INPUT) int KEYCODE_H;
KeyEvent(long downTime, long eventTime, @Source(USER_INPUT) int action, @Source(USER_INPUT) int code, int repeat, int metaState);
KeyEvent(long downTime, long eventTime, @Source(USER_INPUT) int action, @Source(USER_INPUT) int code, int repeat, int metaState, int deviceId, int scancode, int flags);
KeyEvent(@Source(USER_INPUT) int action, @Source(USER_INPUT) int code);
@Source(USER_INPUT) int getKeyCode();

static KeyEvent changeAction(@Source(USER_INPUT)  KeyEvent event, @Source(USER_INPUT) int action);
//Create a new key event that is the same as the given one, but whose action is replaced with the given value.

static KeyEvent changeFlags(@Source(USER_INPUT)  KeyEvent event, int flags);
//Create a new key event that is the same as the given one, but whose flags are replaced with the given value.

static KeyEvent changeTimeRepeat(@Source(USER_INPUT)  KeyEvent event, long eventTime, int newRepeat);
//Create a new key event that is the same as the given one, but whose event time and repeat count are replaced with the given value.

static KeyEvent changeTimeRepeat(@Source(USER_INPUT) KeyEvent event, long eventTime, int newRepeat, int newFlags);
//Create a new key event that is the same as the given one, but whose event time and repeat count are replaced with the given value.

final boolean dispatch(KeyEvent.Callback receiver, KeyEvent.DispatcherState state, Object target);
//Deliver this key event to a KeyEvent.Callback interface.

final boolean dispatch(KeyEvent.Callback receiver);
//This method was deprecated in API level 5. Use dispatch(Callback, DispatcherState, Object); instead.

final int getAction();
//Retrieve the action of this key event.

final String getCharacters();
//For the special case of a ACTION_MULTIPLE event with key code of KEYCODE_UNKNOWN, this is a raw string of characters associated with the event.

static int getDeadChar(int accent, int c);
//Get the character that is produced by putting accent on the character c.

final int getDeviceId();
//Gets the id for the device that this event came from.

char getDisplayLabel();
//Gets the primary character for this key.

final long getDownTime();
//Retrieve the time of the most recent key down event, in the uptimeMillis(); time base.

final long getEventTime();
//Retrieve the time this event occurred, in the uptimeMillis(); time base.

final int getFlags();
//Returns the flags for this key event.

final KeyCharacterMap getKeyCharacterMap();
//Gets the KeyCharacterMap associated with the keyboard device.

@Source(USER_INPUT) int getKeyCode();
//Retrieve the key code of the key event.

boolean getKeyData(KeyCharacterMap.KeyData results);
//This method was deprecated in API level 11. instead use getDisplayLabel();, getNumber(); or getUnicodeChar(int);.

char getMatch(char[] chars);
//Gets the first character in the character array that can be generated by the specified key code.

char getMatch(char[] chars, int metaState);
//Gets the first character in the character array that can be generated by the specified key code.

static int getMaxKeyCode();
//Returns the maximum keycode.

final int getMetaState();
//Returns the state of the meta keys.

static int getModifierMetaStateMask();
//Gets a mask that includes all valid modifier key meta state bits.

final int getModifiers();
//Returns the state of the modifier keys.

char getNumber();
//Gets the number or symbol associated with the key.

final int getRepeatCount();
//Retrieve the repeat count of the event.

final int getScanCode();
//Retrieve the hardware key id of this key event. These values are not reliable and vary from device to device.

final int getSource();
//Gets the source of the event.

int getUnicodeChar();
//Gets the Unicode character generated by the specified key and meta key state combination.

int getUnicodeChar(int metaState);
//Gets the Unicode character generated by the specified key and meta key state combination.

final boolean hasModifiers(int modifiers);
//Returns true if only the specified modifiers keys are pressed.

final boolean hasNoModifiers();
//Returns true if no modifier keys are pressed.

final boolean isAltPressed();
//Returns the pressed state of the ALT meta key.

final boolean isCanceled();
//For ACTION_UP events, indicates that the event has been canceled as per FLAG_CANCELED.

final boolean isCapsLockOn();
//Returns the locked state of the CAPS LOCK meta key.

final boolean isCtrlPressed();
//Returns the pressed state of the CTRL meta key.

final boolean isFunctionPressed();
//Returns the pressed state of the FUNCTION meta key.

final static boolean isGamepadButton(int keyCode);
//Returns true if the specified keycode is a gamepad button.

final boolean isLongPress();
//For ACTION_DOWN events, indicates that the event has been canceled as per FLAG_LONG_PRESS.

final boolean isMetaPressed();
//Returns the pressed state of the META meta key.

static boolean isModifierKey(int keyCode);
//Returns true if this key code is a modifier key.

final boolean isNumLockOn();
//Returns the locked state of the NUM LOCK meta key.

boolean isPrintingKey();
//Returns true if this key produces a glyph.

final boolean isScrollLockOn();
//Returns the locked state of the SCROLL LOCK meta key.

final boolean isShiftPressed();
//Returns the pressed state of the SHIFT meta key.

final boolean isSymPressed();
//Returns the pressed state of the SYM meta key.

final boolean isSystem();
//Is this a system key? System keys can not be used for menu shortcuts.

final boolean isTracking();
//For ACTION_UP events, indicates that the event is still being tracked from its initial down event as per FLAG_TRACKING.

static int keyCodeFromString(String symbolicName);
//Gets a keycode by its symbolic name such as "KEYCODE_A" or an equivalent numeric constant such as "1001".

static String keyCodeToString(int keyCode);
//Returns a string that represents the symbolic name of the specified keycode such as "KEYCODE_A", "KEYCODE_DPAD_UP", or an equivalent numeric constant such as "1001" if unknown.

static boolean metaStateHasModifiers(int metaState, int modifiers);
//Returns true if only the specified modifier keys are pressed according to the specified meta state.

static boolean metaStateHasNoModifiers(int metaState);
//Returns true if no modifiers keys are pressed according to the specified meta state.

static int normalizeMetaState(int metaState);
//Normalizes the specified meta state.

final void setSource(int source);
//Modifies the source of the event.

final void startTracking();
//Call this during onKeyDown(int, KeyEvent); to have the system track the key through its final up (possibly including a long press);.

String toString();
//Returns a string containing a concise, human-readable description of this object.

void writeToParcel(Parcel out, int flags);
//Flatten this object in to a Parcel.

    
}

class KeyEvent$Callback{
        boolean onKeyDown(@Source(USER_INPUT) int arg0, @Source(USER_INPUT) KeyEvent arg1);
        boolean onKeyUp(@Source(USER_INPUT) int arg0, @Source(USER_INPUT) KeyEvent arg1);
}

class LayoutInflater$Factory{
            View onCreateView(String arg0, Context arg1, AttributeSet arg2);
}

class LayoutInflater {

abstract LayoutInflater cloneInContext(Context newContext);
//Create a copy of the existing LayoutInflater object, with the copy pointing to a different Context than the original.

final View createView(String name, String prefix, AttributeSet attrs);
//Low-level function for instantiating a view by name.

static LayoutInflater from(Context context);
//Obtains the LayoutInflater from the given context.

Context getContext();
//Return the context we are running in, for access to resources, class loader, etc.

final LayoutInflater.Factory getFactory();
//Return the current LayoutInflater.Factory (or null);.

final LayoutInflater.Factory2 getFactory2();
//Return the current LayoutInflater.Factory2.

LayoutInflater.Filter getFilter();

View inflate(int resource, ViewGroup root);
//Inflate a new view hierarchy from the specified xml resource.

View inflate(XmlPullParser parser, ViewGroup root);
//Inflate a new view hierarchy from the specified xml node.

View inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot);
//Inflate a new view hierarchy from the specified XML node.

View inflate(int resource, ViewGroup root, boolean attachToRoot);
//Inflate a new view hierarchy from the specified xml resource.

void setFactory(LayoutInflater.Factory factory);
//Attach a custom Factory interface for creating views while using this LayoutInflater.

void setFactory2(LayoutInflater.Factory2 factory);
//Like setFactory(LayoutInflater.Factory);, but allows you to set a LayoutInflater.Factory2 interface.

void setFilter(LayoutInflater.Filter filter);
//Sets the LayoutInflater.Filter to by this LayoutInflater.

//Protected Methods
View onCreateView(String name, AttributeSet attrs);
//This routine is responsible for creating the correct subclass of View given the xml element name.

View onCreateView(View parent, String name, AttributeSet attrs);
//Version of onCreateView(String, AttributeSet); that also takes the future parent of the view being constructure.

}

class Menu {
static final int NONE;
static final int FIRST;

abstract MenuItem add(@Sink(DISPLAY) CharSequence title);
//Add a new item to the menu.

abstract MenuItem add(int groupId, int itemId, int order, int titleRes);
//Variation on add(int, int, int, CharSequence); that takes a string resource identifier instead of the string itself.

abstract MenuItem add(int titleRes);
//Add a new item to the menu.

abstract MenuItem add(int groupId, int itemId, int order, @Sink(DISPLAY) CharSequence title);
//Add a new item to the menu.

abstract int addIntentOptions(int groupId, int itemId, int order, ComponentName caller, Intent[] specifics, Intent intent, int flags, MenuItem[] outSpecificItems);
//Add a group of menu items corresponding to actions that can be performed for a particular Intent.

abstract SubMenu addSubMenu(int groupId, int itemId, int order, @Sink(DISPLAY) CharSequence title);
//Add a new sub-menu to the menu.

abstract SubMenu addSubMenu(int groupId, int itemId, int order, int titleRes);
//Variation on addSubMenu(int, int, int, CharSequence); that takes a string resource identifier for the title instead of the string itself.

abstract SubMenu addSubMenu(@Sink(DISPLAY) CharSequence title);
//Add a new sub-menu to the menu.

abstract SubMenu addSubMenu(int titleRes);
//Add a new sub-menu to the menu.

abstract void clear();
//Remove all existing items from the menu, leaving it empty as if it had just been created.

abstract void close();
//Closes the menu, if open.

abstract MenuItem findItem(int id);
//Return the menu item with a particular identifier.

abstract MenuItem getItem(int index);
//Gets the menu item at the given index.

abstract boolean hasVisibleItems();
//Return whether the menu currently has item items that are visible.

abstract boolean isShortcutKey(@Source(USER_INPUT) int keyCode, @Source(USER_INPUT) KeyEvent event);
//Is a keypress one of the defined shortcut keys for this window.

abstract boolean performIdentifierAction(int id, int flags);
//Execute the menu item action associated with the given menu identifier.

abstract boolean performShortcut(@Source(USER_INPUT) int keyCode, @Source(USER_INPUT) KeyEvent event, int flags);
//Execute the menu item action associated with the given shortcut character.

abstract void removeGroup(int groupId);
//Remove all items in the given group.

abstract void removeItem(int id);
//Remove the item with the given identifier.

abstract void setGroupCheckable(int group, boolean checkable, boolean exclusive);
//Control whether a particular group of items can show a check mark.

abstract void setGroupEnabled(int group, boolean enabled);
//Enable or disable all menu items that are in the given group.

abstract void setGroupVisible(int group, boolean visible);
//Show or hide all menu items that are in the given group.

abstract void setQwertyMode(boolean isQwerty);
//Control whether the menu should be running in qwerty mode (alphabetic shortcuts); or 12-key mode (numeric shortcuts);.

abstract int size();
//Get the number of items in the menu.

}


class MenuInflater {
    
void inflate(int menuRes, Menu menu);
//Inflate a menu hierarchy from the specified XML resource.



}

class MenuItem {

abstract boolean collapseActionView();
//Collapse the action view associated with this menu item.

abstract boolean expandActionView();
//Expand the action view associated with this menu item.

abstract ActionProvider getActionProvider();
//Gets the ActionProvider.

abstract View getActionView();
//Returns the currently set action view for this menu item.

abstract char getAlphabeticShortcut();
//Return the char for this menu item's alphabetic shortcut.

abstract int getGroupId();
//Return the group identifier that this menu item is part of.

abstract Drawable getIcon();
//Returns the icon for this item as a Drawable (getting it from resources if it hasn't been loaded before);.

abstract Intent getIntent();
//Return the Intent associated with this item.

abstract int getItemId();
//Return the identifier for this menu item.

abstract ContextMenu.ContextMenuInfo getMenuInfo();
//Gets the extra information linked to this menu item.

abstract char getNumericShortcut();
//Return the char for this menu item's numeric (12-key); shortcut.

abstract int getOrder();
//Return the category and order within the category of this item.

abstract SubMenu getSubMenu();
//Get the sub-menu to be invoked when this item is selected, if it has one.

abstract CharSequence getTitle();
//Retrieve the current title of the item.

abstract CharSequence getTitleCondensed();
//Retrieve the current condensed title of the item.

abstract boolean hasSubMenu();
//Check whether this item has an associated sub-menu.

abstract boolean isActionViewExpanded();
//Returns true if this menu item's action view has been expanded.

abstract boolean isCheckable();
//Return whether the item can currently display a check mark.

abstract boolean isChecked();
//Return whether the item is currently displaying a check mark.

abstract boolean isEnabled();
//Return the enabled state of the menu item.

abstract boolean isVisible();
//Return the visibility of the menu item.

abstract MenuItem setActionProvider(ActionProvider actionProvider);
//Sets the ActionProvider responsible for creating an action view if the item is placed on the action bar.

abstract MenuItem setActionView(int resId);
//Set an action view for this menu item.

abstract MenuItem setActionView(View view);
//Set an action view for this menu item.

abstract MenuItem setAlphabeticShortcut(char alphaChar);
//Change the alphabetic shortcut associated with this item.

abstract MenuItem setCheckable(boolean checkable);
//Control whether this item can display a check mark.

abstract MenuItem setChecked(@Sink(DISPLAY) boolean checked);
//Control whether this item is shown with a check mark.

abstract MenuItem setEnabled(@Sink(DISPLAY) boolean enabled);
//Sets whether the menu item is enabled.
// setting to false greys out the View

abstract MenuItem setIcon(@Sink(DISPLAY) Drawable icon);
//Change the icon associated with this item.

abstract MenuItem setIcon(int iconRes);
//Change the icon associated with this item.

abstract MenuItem setIntent(Intent intent);
//Change the Intent associated with this item.

abstract MenuItem setNumericShortcut(char numericChar);
//Change the numeric shortcut associated with this item.

abstract MenuItem setOnActionExpandListener(MenuItem.OnActionExpandListener listener);
//Set an MenuItem.OnActionExpandListener on this menu item to be notified when the associated action view is expanded or collapsed.

abstract MenuItem setOnMenuItemClickListener(MenuItem.OnMenuItemClickListener menuItemClickListener);
//Set a custom listener for invocation of this menu item.

abstract MenuItem setShortcut(char numericChar, char alphaChar);
//Change both the numeric and alphabetic shortcut associated with this item.

abstract void setShowAsAction(int actionEnum);
//Sets how this item should display in the presence of an Action Bar.

abstract MenuItem setShowAsActionFlags(int actionEnum);
//Sets how this item should display in the presence of an Action Bar.

abstract MenuItem setTitle(@Sink(DISPLAY) CharSequence title);
//Change the title associated with this item.

abstract MenuItem setTitle(int title);
//Change the title associated with this item.

abstract MenuItem setTitleCondensed(@Sink(DISPLAY) CharSequence title);
//Change the condensed title associated with this item.

abstract MenuItem setVisible(@Sink(DISPLAY) boolean visible);
//Sets the visibility of the menu item.

}

class MenuItem$OnMenuItemClickListener{
        boolean onMenuItemClick(MenuItem arg0);
}

class MotionEvent {
        static final @Source(USER_INPUT) int ACTION_CANCEL;
        static final @Source(USER_INPUT) int ACTION_DOWN;
        static final @Source(USER_INPUT) int ACTION_MOVE;
        static final @Source(USER_INPUT) int ACTION_UP;


final void addBatch(long eventTime, PointerCoords[] pointerCoords, int metaState);
//Add a new movement to the batch of movements in this event.

final void addBatch(long eventTime, float x, float y, float pressure, float size, int metaState);
//Add a new movement to the batch of movements in this event.

static int axisFromString(String symbolicName);
//Gets an axis by its symbolic name such as "AXIS_X" or an equivalent numeric constant such as "42".

static String axisToString(int axis);
//Returns a string that represents the symbolic name of the specified axis such as "AXIS_X" or an equivalent numeric constant such as "42" if unknown.

final int findPointerIndex(int pointerId);
//Given a pointer identifier, find the index of its data in the event.

final int getAction();
//Return the kind of action being performed.

final int getActionIndex();
//For ACTION_POINTER_DOWN or ACTION_POINTER_UP as returned by getActionMasked();, this returns the associated pointer index.

final int getActionMasked();
//Return the masked action being performed, without pointer index information.

final float getAxisValue(int axis);
//getAxisValue(int); for the first pointer index (may be an arbitrary pointer identifier);.

final float getAxisValue(int axis, int pointerIndex);
//Returns the value of the requested axis for the given pointer index (use getPointerId(int); to find the pointer identifier for this index);.

final int getButtonState();
//Gets the state of all buttons that are pressed such as a mouse or stylus button.

final int getDeviceId();
//Gets the id for the device that this event came from.

final long getDownTime();
//Returns the time (in ms); when the user originally pressed down to start a stream of position events.

final int getEdgeFlags();
//Returns a bitfield indicating which edges, if any, were touched by this MotionEvent.

final @Source(READ_TIME) long getEventTime();
//Retrieve the time this event occurred, in the uptimeMillis(); time base.

final int getFlags();
//Gets the motion event flags.

final float getHistoricalAxisValue(int axis, int pointerIndex, int pos);
//Returns the historical value of the requested axis, as per getAxisValue(int, int);, occurred between this event and the previous event for the given pointer.

final float getHistoricalAxisValue(int axis, int pos);
//getHistoricalAxisValue(int, int, int); for the first pointer index (may be an arbitrary pointer identifier);.

final long getHistoricalEventTime(int pos);
//Returns the time that a historical movement occurred between this event and the previous event, in the uptimeMillis(); time base.

final float getHistoricalOrientation(int pointerIndex, int pos);
//Returns a historical orientation coordinate, as per getOrientation(int);, that occurred between this event and the previous event for the given pointer.

final float getHistoricalOrientation(int pos);
//getHistoricalOrientation(int, int); for the first pointer index (may be an arbitrary pointer identifier);.

final void getHistoricalPointerCoords(int pointerIndex, int pos, MotionEvent.PointerCoords outPointerCoords);
//Populates a MotionEvent.PointerCoords object with historical pointer coordinate data, as per getPointerCoords(int, MotionEvent.PointerCoords);, that occurred between this event and the previous event for the given pointer.

final float getHistoricalPressure(int pos);
//getHistoricalPressure(int, int); for the first pointer index (may be an arbitrary pointer identifier);.

final float getHistoricalPressure(int pointerIndex, int pos);
//Returns a historical pressure coordinate, as per getPressure(int);, that occurred between this event and the previous event for the given pointer.

final float getHistoricalSize(int pos);
//getHistoricalSize(int, int); for the first pointer index (may be an arbitrary pointer identifier);.

final float getHistoricalSize(int pointerIndex, int pos);
//Returns a historical size coordinate, as per getSize(int);, that occurred between this event and the previous event for the given pointer.

final float getHistoricalToolMajor(int pointerIndex, int pos);
//Returns a historical tool major axis coordinate, as per getToolMajor(int);, that occurred between this event and the previous event for the given pointer.

final float getHistoricalToolMajor(int pos);
//getHistoricalToolMajor(int, int); for the first pointer index (may be an arbitrary pointer identifier);.

final float getHistoricalToolMinor(int pointerIndex, int pos);
//Returns a historical tool minor axis coordinate, as per getToolMinor(int);, that occurred between this event and the previous event for the given pointer.

final float getHistoricalToolMinor(int pos);
//getHistoricalToolMinor(int, int); for the first pointer index (may be an arbitrary pointer identifier);.

final float getHistoricalTouchMajor(int pointerIndex, int pos);
//Returns a historical touch major axis coordinate, as per getTouchMajor(int);, that occurred between this event and the previous event for the given pointer.

final float getHistoricalTouchMajor(int pos);
//getHistoricalTouchMajor(int, int); for the first pointer index (may be an arbitrary pointer identifier);.

final float getHistoricalTouchMinor(int pointerIndex, int pos);
//Returns a historical touch minor axis coordinate, as per getTouchMinor(int);, that occurred between this event and the previous event for the given pointer.

final float getHistoricalTouchMinor(int pos);
//getHistoricalTouchMinor(int, int); for the first pointer index (may be an arbitrary pointer identifier);.

final float getHistoricalX(int pos);
//getHistoricalX(int, int); for the first pointer index (may be an arbitrary pointer identifier);.

final float getHistoricalX(int pointerIndex, int pos);
//Returns a historical X coordinate, as per getX(int);, that occurred between this event and the previous event for the given pointer.

final float getHistoricalY(int pos);
//getHistoricalY(int, int); for the first pointer index (may be an arbitrary pointer identifier);.

final float getHistoricalY(int pointerIndex, int pos);
//Returns a historical Y coordinate, as per getY(int);, that occurred between this event and the previous event for the given pointer.

final int getHistorySize();
//Returns the number of historical points in this event.

final int getMetaState();
//Returns the state of any meta / modifier keys that were in effect when the event was generated.

final float getOrientation(int pointerIndex);
//Returns the orientation of the touch area and tool area in radians clockwise from vertical for the given pointer index (use getPointerId(int); to find the pointer identifier for this index);.

final float getOrientation();
//getOrientation(int); for the first pointer index (may be an arbitrary pointer identifier);.

final void getPointerCoords(int pointerIndex, MotionEvent.PointerCoords outPointerCoords);
//Populates a MotionEvent.PointerCoords object with pointer coordinate data for the specified pointer index.

final int getPointerCount();
//The number of pointers of data contained in this event.

final int getPointerId(int pointerIndex);
//Return the pointer identifier associated with a particular pointer data index is this event.

final void getPointerProperties(int pointerIndex, MotionEvent.PointerProperties outPointerProperties);
//Populates a MotionEvent.PointerProperties object with pointer properties for the specified pointer index.

final float getPressure();
//getPressure(int); for the first pointer index (may be an arbitrary pointer identifier);.

final float getPressure(int pointerIndex);
//Returns the current pressure of this event for the given pointer index (use getPointerId(int); to find the pointer identifier for this index);.

final float getRawX();
//Returns the original raw X coordinate of this event.

final float getRawY();
//Returns the original raw Y coordinate of this event.

final float getSize(int pointerIndex);
//Returns a scaled value of the approximate size for the given pointer index (use getPointerId(int); to find the pointer identifier for this index);.

final float getSize();
//getSize(int); for the first pointer index (may be an arbitrary pointer identifier);.

final int getSource();
//Gets the source of the event.

final float getToolMajor(int pointerIndex);
//Returns the length of the major axis of an ellipse that describes the size of the approaching tool for the given pointer index (use getPointerId(int); to find the pointer identifier for this index);.

final float getToolMajor();
//getToolMajor(int); for the first pointer index (may be an arbitrary pointer identifier);.

final float getToolMinor();
//getToolMinor(int); for the first pointer index (may be an arbitrary pointer identifier);.

final float getToolMinor(int pointerIndex);
//Returns the length of the minor axis of an ellipse that describes the size of the approaching tool for the given pointer index (use getPointerId(int); to find the pointer identifier for this index);.

final int getToolType(int pointerIndex);
//Gets the tool type of a pointer for the given pointer index.

final float getTouchMajor();
//getTouchMajor(int); for the first pointer index (may be an arbitrary pointer identifier);.

final float getTouchMajor(int pointerIndex);
//Returns the length of the major axis of an ellipse that describes the touch area at the point of contact for the given pointer index (use getPointerId(int); to find the pointer identifier for this index);.

final float getTouchMinor();
//getTouchMinor(int); for the first pointer index (may be an arbitrary pointer identifier);.

final float getTouchMinor(int pointerIndex);
//Returns the length of the minor axis of an ellipse that describes the touch area at the point of contact for the given pointer index (use getPointerId(int); to find the pointer identifier for this index);.

final float getX(int pointerIndex);
//Returns the X coordinate of this event for the given pointer index (use getPointerId(int); to find the pointer identifier for this index);.

final float getX();
//getX(int); for the first pointer index (may be an arbitrary pointer identifier);.

final float getXPrecision();
//Return the precision of the X coordinates being reported.

final float getY(int pointerIndex);
//Returns the Y coordinate of this event for the given pointer index (use getPointerId(int); to find the pointer identifier for this index);.

final float getY();
//getY(int); for the first pointer index (may be an arbitrary pointer identifier);.

final float getYPrecision();
//Return the precision of the Y coordinates being reported.

static MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, PointerProperties[] pointerProperties, PointerCoords[] pointerCoords, int metaState, int buttonState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int flags);
//Create a new MotionEvent, filling in all of the basic values that define the motion.

static MotionEvent obtain(long downTime, long eventTime, int action, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags);
//Create a new MotionEvent, filling in all of the basic values that define the motion.

static MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags);
//This method was deprecated in API level 9. Use obtain(long, long, int, float, float, float, float, int, float, float, int, int); instead.

static MotionEvent obtain(long downTime, long eventTime, int action, int pointerCount, int[] pointerIds, PointerCoords[] pointerCoords, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int flags);
//This method was deprecated in API level 14. Use obtain(long, long, int, int, PointerProperties[], PointerCoords[], int, int, float, float, int, int, int, int); instead.

static MotionEvent obtain(MotionEvent other);
//Create a new MotionEvent, copying from an existing one.

static MotionEvent obtain(long downTime, long eventTime, int action, float x, float y, int metaState);
//Create a new MotionEvent, filling in a subset of the basic motion values.

static MotionEvent obtainNoHistory(MotionEvent other);
//Create a new MotionEvent, copying from an existing one, but not including any historical point information.

final void offsetLocation(float deltaX, float deltaY);
//Adjust this event's location.

final void recycle();
//Recycle the MotionEvent, to be re-used by a later caller.

final void setAction(int action);
//Sets this event's action.

final void setEdgeFlags(int flags);
//Sets the bitfield indicating which edges, if any, were touched by this MotionEvent.

final void setLocation(float x, float y);
//Set this event's location.

final void setSource(int source);
//Modifies the source of the event.

String toString();
//Returns a string containing a concise, human-readable description of this object.

final void transform(Matrix matrix);
//Applies a transformation matrix to all of the points in the event.

void writeToParcel(Parcel out, int flags);
//Flatten this object in to a Parcel.

//Protected Methods

void finalize();
//Invoked when the garbage collector has detected that this instance is no longer reachable.

}

class DragEvent {
    static final @Source(USER_INPUT) int ACTION_DRAG_STARTED;
    static final @Source(USER_INPUT) int ACTION_DRAG_LOCATION;
    static final @Source(USER_INPUT) int ACTION_DROP;
    static final @Source(USER_INPUT) int ACTION_DRAG_ENDED;
    static final @Source(USER_INPUT) int ACTION_DRAG_ENTERED;
    static final @Source(USER_INPUT) int ACTION_DRAG_EXITED;

    int getAction();

    float getX();

    float getY();

    final void recycle();
}

class SubMenu{
        SubMenu setIcon(int arg0);
}

class SurfaceView{
SurfaceView(Context context);

//SOM
 @Sink({DISPLAY}) SurfaceHolder getHolder ();
}        
     
class SoundEffectConstants {
    
static int getContantForFocusDirection(int direction);
//Get the sonification constant for the focus directions.


}
class SurfaceHolder {
    
    
        static final int SURFACE_TYPE_GPU;

abstract void addCallback(SurfaceHolder.Callback callback);
//Add a Callback interface for this holder.

abstract Surface getSurface();
//Direct access to the surface object.

abstract Rect getSurfaceFrame();
//Retrieve the current size of the surface.

abstract boolean isCreating();
//Use this method to find out if the surface is in the process of being created from Callback methods.

abstract Canvas lockCanvas(Rect dirty);
//Just like lockCanvas(); but allows specification of a dirty rectangle.

abstract Canvas lockCanvas();
//Start editing the pixels in the surface.

abstract void removeCallback(SurfaceHolder.Callback callback);
//Removes a previously added Callback interface from this holder.

abstract void setFixedSize(int width, int height);
//Make the surface a fixed size.

abstract void setFormat(int format);
//Set the desired PixelFormat of the surface.

abstract void setKeepScreenOn(boolean screenOn);
//Enable or disable option to keep the screen turned on while this surface is displayed.

abstract void setSizeFromLayout();
//Allow the surface to resized based on layout of its container (this is the default);.

abstract void setType(int type);
//This method was deprecated in API level 11. this is ignored, this value is set automatically when needed.

abstract void unlockCanvasAndPost(Canvas canvas);
//Finish editing pixels in the surface.



}

interface SurfaceHolder$Callback {
    void surfaceCreated(@Sink(DISPLAY) SurfaceHolder arg0);
    void surfaceChanged(@Sink(DISPLAY) SurfaceHolder arg0, int arg1, int arg2, int arg3);
    void surfaceDestroyed(@Sink(DISPLAY) SurfaceHolder arg0);
}

class SurfaceView {
    
    
void draw(Canvas canvas);
//Manually render this view (and all of its children); to the given Canvas.

boolean gatherTransparentRegion(Region region);
//This is used by the RootView to perform an optimization when the view hierarchy contains one or several SurfaceView.

SurfaceHolder getHolder();
//Return the SurfaceHolder providing access and control over this SurfaceView's underlying surface.

void setSecure(boolean isSecure);
//Control whether the surface view's content should be treated as secure, preventing it from appearing in screenshots or from being viewed on non-secure displays.

void setVisibility(int visibility);
//Set the enabled state of this view.

void setZOrderMediaOverlay(boolean isMediaOverlay);
//Control whether the surface view's surface is placed on top of another regular surface view in the window (but still behind the window itself);.

void setZOrderOnTop(boolean onTop);
//Control whether the surface view's surface is placed on top of its window.

//Protected Methods
void dispatchDraw(Canvas canvas);
//Called by draw to draw the child views.

void onAttachedToWindow();
//This is called when the view is attached to a window.

void onDetachedFromWindow();
//This is called when the view is detached from a window.

void onMeasure(int widthMeasureSpec, int heightMeasureSpec);
//Measure the view and its content to determine the measured width and the measured height.

void onWindowVisibilityChanged(int visibility);
//Called when the window containing has change its visibility (between GONE, INVISIBLE, and VISIBLE);.



}


class VelocityTracker {

void addMovement(MotionEvent event);
//Add a user's movement to the tracker.

void clear();
//Reset the velocity tracker back to its initial state.

void computeCurrentVelocity(int units, float maxVelocity);
//Compute the current velocity based on the points that have been collected.

void computeCurrentVelocity(int units);
//Equivalent to invoking computeCurrentVelocity(int, float); with a maximum velocity of Float.MAX_VALUE.

float getXVelocity();
//Retrieve the last computed X velocity.

float getXVelocity(int id);
//Retrieve the last computed X velocity.

float getYVelocity(int id);
//Retrieve the last computed Y velocity.

float getYVelocity();
//Retrieve the last computed Y velocity.

static VelocityTracker obtain();
//Retrieve a new VelocityTracker object to watch the velocity of a motion.

void recycle();
//Return a VelocityTracker object back to be re-used by others.

//Protected Methods
void finalize();
//Invoked when the garbage collector has detected that this instance is no longer reachable.

}

class ViewManager{
        void removeView(@Sink(DISPLAY) View arg0);
        void addView(View arg0, LayoutParams arg1);

}
class View {

        static final int FOCUS_UP;
        static final int FOCUS_DOWN;
        static final int FOCUS_LEFT;
        static final int SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION;
        static final int FOCUS_BACKWARD;
        static final int FOCUS_FORWARD;
        static final int FOCUS_RIGHT;

        static final int INVISIBLE;
        static final int VISIBLE;
        static final int GONE;
        View(Context context, AttributeSet attrs, int defStyleAttr);
        View(Context context);

View(Context context, AttributeSet attrs);

void addChildrenForAccessibility(ArrayList<View> children);
//Adds the children of a given View for accessibility.

void addFocusables(ArrayList<View> views, int direction, int focusableMode);
//Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself); to views.

void addFocusables(ArrayList<View> views, int direction);
//Add any focusable views that are descendants of this view (possibly including this view if it is focusable itself); to views.

void addOnAttachStateChangeListener(View.OnAttachStateChangeListener listener);
//Add a listener for attach state changes.

void addOnLayoutChangeListener(View.OnLayoutChangeListener listener);
//Add a listener that will be called when the bounds of the view change due to layout processing.

void addTouchables(ArrayList<View> views);
//Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself); to views.

ViewPropertyAnimator animate();
//This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View.

void announceForAccessibility(CharSequence text);
//Convenience method for sending a TYPE_ANNOUNCEMENT AccessibilityEvent to make an announcement which is related to some sort of a context change for which none of the events representing UI transitions is a good fit.

void bringToFront();
//Change the view's z order in the tree, so it's on top of other sibling views

void buildDrawingCache();
//Calling this method is equivalent to calling buildDrawingCache(false);.

void buildDrawingCache(boolean autoScale);
//Forces the drawing cache to be built if the drawing cache is invalid.

void buildLayer();
//Forces this view's layer to be created and this view to be rendered into its layer.

boolean callOnClick();
//Directly call any attached OnClickListener.

boolean canScrollHorizontally(int direction);
//Check if this view can be scrolled horizontally in a certain direction.

boolean canScrollVertically(int direction);
//Check if this view can be scrolled vertically in a certain direction.

void cancelLongPress();
//Cancels a pending long press.

boolean checkInputConnectionProxy(View view);
//Called by the InputMethodManager when a view who is not the current input connection target is trying to make a call on the manager.

void clearAnimation();
//Cancels any animations for this view.

void clearFocus();
//Called when this view wants to give up focus.

static int combineMeasuredStates(int curState, int newState);
//Merge two states as returned by getMeasuredState();.

void computeScroll();
//Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary.

AccessibilityNodeInfo createAccessibilityNodeInfo();
//Returns an AccessibilityNodeInfo representing this view from the point of view of an AccessibilityService.

void createContextMenu(@Sink(DISPLAY) ContextMenu menu);
//Show the context menu for this view.

void destroyDrawingCache();
//Frees the resources used by the drawing cache.

void dispatchConfigurationChanged(Configuration newConfig);
//Dispatch a notification about a resource configuration change down the view hierarchy.

void dispatchDisplayHint(int hint);
//Dispatch a hint about whether this view is displayed.

boolean dispatchDragEvent(DragEvent event);
//Detects if this View is enabled and has a drag event listener.

boolean dispatchGenericMotionEvent(MotionEvent event);
//Dispatch a generic motion event.

boolean dispatchKeyEvent(@Source(USER_INPUT) KeyEvent event);
//Dispatch a key event to the next view on the focus path.

boolean dispatchKeyEventPreIme(@Source(USER_INPUT) KeyEvent event);
//Dispatch a key event before it is processed by any input method associated with the view hierarchy.

boolean dispatchKeyShortcutEvent(@Source(USER_INPUT) KeyEvent event);
//Dispatches a key shortcut event.

boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event);
//Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event.

void dispatchSystemUiVisibilityChanged(int visibility);
//Dispatch callbacks to setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener); down the view hierarchy.

boolean dispatchTouchEvent(MotionEvent event);
//Pass the touch screen motion event down to the target view, or this view if it is the target.

boolean dispatchTrackballEvent(MotionEvent event);
//Pass a trackball motion event down to the focused view.

boolean dispatchUnhandledMove(View focused, int direction);
//This method is the last chance for the focused view and its ancestors to respond to an arrow key.

void dispatchWindowFocusChanged(boolean hasFocus);
//Called when the window containing this view gains or loses window focus.

void dispatchWindowSystemUiVisiblityChanged(int visible);
//Dispatch callbacks to onWindowSystemUiVisibilityChanged(int); down the view hierarchy.

void dispatchWindowVisibilityChanged(int visibility);
//Dispatch a window visibility change down the view hierarchy.

void draw(Canvas canvas);
//Manually render this view (and all of its children); to the given Canvas.

View findFocus();
//Find the view in the hierarchy rooted at this view that currently has focus.

final View findViewById(int id);
//Look for a child view with the given id.

final View findViewWithTag(Object tag);
//Look for a child view with the given tag.

void findViewsWithText(ArrayList<View> outViews, CharSequence searched, int flags);
//Finds the Views that contain given text.

View focusSearch(int direction);
//Find the nearest view in the specified direction that can take focus.

void forceLayout();
//Forces this view to be laid out during the next layout pass.

static int generateViewId();
//Generate a value suitable for use in setId(int);.

AccessibilityNodeProvider getAccessibilityNodeProvider();
//Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content.

float getAlpha();
//The opacity of the view.

Animation getAnimation();
//Get the animation currently associated with this view.

IBinder getApplicationWindowToken();
//Retrieve a unique token identifying the top-level "real" window of the window that this view is attached to.

Drawable getBackground();
//Gets the background drawable

int getBaseline();
//Return the offset of the widget's text baseline from the widget's top boundary.

final int getBottom();
//Bottom position of this view relative to its parent.

float getCameraDistance();
//Gets the distance along the Z axis from the camera to this view.

CharSequence getContentDescription();
//Gets the View description.

final Context getContext();
//Returns the context the view is running in, through which it can access the current theme, resources, etc.

static int getDefaultSize(int size, int measureSpec);
//Utility to return a default size.

Display getDisplay();
//Gets the logical display to which the view's window has been attached.

final int[] getDrawableState();
//Return an array of resource IDs of the drawable states representing the current state of the view.

Bitmap getDrawingCache(boolean autoScale);
//Returns the bitmap in which this view drawing is cached.

Bitmap getDrawingCache();
//Calling this method is equivalent to calling getDrawingCache(false);.

int getDrawingCacheBackgroundColor();

int getDrawingCacheQuality();
//Returns the quality of the drawing cache.

void getDrawingRect(Rect outRect);
//Return the visible drawing bounds of your view.

long getDrawingTime();
//Return the time at which the drawing of the view hierarchy started.

boolean getFilterTouchesWhenObscured();
//Gets whether the framework should discard touches when the view's window is obscured by another visible window.

boolean getFitsSystemWindows();
//Check for state of If this method returns true, the default implementation of {@link #fitSystemWindows(Rect); will be executed.

ArrayList<View> getFocusables(int direction);
//Find and return all focusable views that are descendants of this view, possibly including this view if it is focusable itself.

void getFocusedRect(Rect r);
//When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method.

boolean getGlobalVisibleRect(Rect r, Point globalOffset);
//If some part of this view is not clipped by any of its parents, then return that area in r in global (root); coordinates.

final boolean getGlobalVisibleRect(Rect r);

Handler getHandler();

final int getHeight();
//Return the height of your view.

void getHitRect(Rect outRect);
//Hit rectangle in parent's coordinates

int getHorizontalFadingEdgeLength();
//Returns the size of the horizontal faded edges used to indicate that more content in this view is visible.

int getId();
//Returns this view's identifier.

int getImportantForAccessibility();
//Gets the mode for determining whether this View is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen.

boolean getKeepScreenOn();
//Returns whether the screen should remain on, corresponding to the current value of KEEP_SCREEN_ON.

KeyEvent.DispatcherState getKeyDispatcherState();
//Return the global KeyEvent.DispatcherState for this view's window.

int getLabelFor();
//Gets the id of a view for which this view serves as a label for accessibility purposes.

int getLayerType();
//Indicates what type of layer is currently associated with this view.

int getLayoutDirection();
//Returns the resolved layout direction for this view.

ViewGroup.LayoutParams getLayoutParams();
//Get the LayoutParams associated with this view.

final int getLeft();
//Left position of this view relative to its parent.

final boolean getLocalVisibleRect(Rect r);

void getLocationInWindow(int[] location);
//Computes the coordinates of this view in its window.

void getLocationOnScreen(int[] location);
//Computes the coordinates of this view on the screen.

Matrix getMatrix();
//The transform matrix of this view, which is calculated based on the current roation, scale, and pivot properties.

final int getMeasuredHeight();
//Like getMeasuredHeightAndState();, but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK);.

final int getMeasuredHeightAndState();
//Return the full height measurement information for this view as computed by the most recent call to measure(int, int);.

final int getMeasuredState();
//Return only the state bits of getMeasuredWidthAndState(); and getMeasuredHeightAndState();, combined into one integer.

final int getMeasuredWidth();
//Like getMeasuredWidthAndState();, but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK);.

final int getMeasuredWidthAndState();
//Return the full width measurement information for this view as computed by the most recent call to measure(int, int);.

int getMinimumHeight();
//Returns the minimum height of the view.

int getMinimumWidth();
//Returns the minimum width of the view.

int getNextFocusDownId();
//Gets the id of the view to use when the next focus is FOCUS_DOWN.

int getNextFocusForwardId();
//Gets the id of the view to use when the next focus is FOCUS_FORWARD.

int getNextFocusLeftId();
//Gets the id of the view to use when the next focus is FOCUS_LEFT.

int getNextFocusRightId();
//Gets the id of the view to use when the next focus is FOCUS_RIGHT.

int getNextFocusUpId();
//Gets the id of the view to use when the next focus is FOCUS_UP.

View.OnFocusChangeListener getOnFocusChangeListener();
//Returns the focus-change callback registered for this view.

int getOverScrollMode();
//Returns the over-scroll mode for this view.

int getPaddingBottom();
//Returns the bottom padding of this view.

int getPaddingEnd();
//Returns the end padding of this view depending on its resolved layout direction.

int getPaddingLeft();
//Returns the left padding of this view.

int getPaddingRight();
//Returns the right padding of this view.

int getPaddingStart();
//Returns the start padding of this view depending on its resolved layout direction.

int getPaddingTop();
//Returns the top padding of this view.

final ViewParent getParent();
//Gets the parent of this view.

ViewParent getParentForAccessibility();
//Gets the parent for accessibility purposes.

float getPivotX();
//The x location of the point around which the view is rotated and scaled.

float getPivotY();
//The y location of the point around which the view is rotated and scaled.

Resources getResources();
//Returns the resources associated with this view.

final int getRight();
//Right position of this view relative to its parent.

View getRootView();
//Finds the topmost view in the current view hierarchy.

float getRotation();
//The degrees that the view is rotated around the pivot point.

float getRotationX();
//The degrees that the view is rotated around the horizontal axis through the pivot point.

float getRotationY();
//The degrees that the view is rotated around the vertical axis through the pivot point.

float getScaleX();
//The amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width.

float getScaleY();
//The amount that the view is scaled in y around the pivot point, as a proportion of the view's unscaled height.

int getScrollBarDefaultDelayBeforeFade();
//Returns the delay before scrollbars fade.

int getScrollBarFadeDuration();
//Returns the scrollbar fade duration.

int getScrollBarSize();
//Returns the scrollbar size.

int getScrollBarStyle();
//Returns the current scrollbar style.

final int getScrollX();
//Return the scrolled left position of this view.

final int getScrollY();
//Return the scrolled top position of this view.

int getSolidColor();
//Override this if your view is known to always be drawn on top of a solid color background, and needs to draw fading edges.

int getSystemUiVisibility();
//Returns the last {@link #setSystemUiVisibility(int); that this view has requested.

Object getTag(int key);
//Returns the tag associated with this view and the specified key.

Object getTag();
//Returns this view's tag.

int getTextAlignment();
//Return the resolved text alignment.

int getTextDirection();
//Return the resolved text direction.

final int getTop();
//Top position of this view relative to its parent.

TouchDelegate getTouchDelegate();
//Gets the TouchDelegate for this View.

ArrayList<View> getTouchables();
//Find and return all touchable views that are descendants of this view, possibly including this view if it is touchable itself.

float getTranslationX();
//The horizontal location of this view relative to its left position.

float getTranslationY();
//The horizontal location of this view relative to its top position.

int getVerticalFadingEdgeLength();
//Returns the size of the vertical faded edges used to indicate that more content in this view is visible.

int getVerticalScrollbarPosition();

int getVerticalScrollbarWidth();
//Returns the width of the vertical scrollbar.

ViewTreeObserver getViewTreeObserver();
//Returns the ViewTreeObserver for this view's hierarchy.

int getVisibility();
//Returns the visibility status for this view.

final int getWidth();
//Return the width of the your view.

int getWindowSystemUiVisibility();
//Returns the current system UI visibility that is currently set for the entire window.

IBinder getWindowToken();
//Retrieve a unique token identifying the window this view is attached to.

int getWindowVisibility();
//Returns the current visibility of the window this view is attached to (either GONE, INVISIBLE, or VISIBLE);.

void getWindowVisibleDisplayFrame(Rect outRect);
//Retrieve the overall visible display size in which the window this view is attached to has been positioned in.

float getX();
//The visual x position of this view, in pixels.

float getY();
//The visual y position of this view, in pixels.

boolean hasFocus();
//Returns true if this view has focus iteself, or is the ancestor of the view that has focus.

boolean hasFocusable();
//Returns true if this view is focusable or if it contains a reachable View for which hasFocusable(); returns true.

boolean hasOnClickListeners();
//Return whether this view has an attached OnClickListener.

boolean hasOverlappingRendering();
//Returns whether this View has content which overlaps.

boolean hasTransientState();
//Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible.

boolean hasWindowFocus();
//Returns true if this view is in a window that currently has window focus.

static View inflate(Context context, int resource, ViewGroup root);
//Inflate a view from an XML resource.

void invalidate(Rect dirty);
//Mark the area defined by dirty as needing to be drawn.

void invalidate(int l, int t, int r, int b);
//Mark the area defined by the rect (l,t,r,b); as needing to be drawn.

void invalidate();
//Invalidate the whole view.

void invalidateDrawable(Drawable drawable);
//Invalidates the specified Drawable.

boolean isActivated();
//Indicates the activation state of this view.

boolean isClickable();
//Indicates whether this view reacts to click events or not.

boolean isDirty();
//True if this view has changed since the last time being drawn.

boolean isDrawingCacheEnabled();
//Indicates whether the drawing cache is enabled for this view.

boolean isDuplicateParentStateEnabled();
//Indicates whether this duplicates its drawable state from its parent.

boolean isEnabled();
//Returns the enabled status for this view.

final boolean isFocusable();
//Returns whether this View is able to take focus.

final boolean isFocusableInTouchMode();
//When a view is focusable, it may not want to take focus when in touch mode.

boolean isFocused();
//Returns true if this view has focus

boolean isHapticFeedbackEnabled();

boolean isHardwareAccelerated();
//Indicates whether this view is attached to a hardware accelerated window or not.

boolean isHorizontalFadingEdgeEnabled();
//Indicate whether the horizontal edges are faded when the view is scrolled horizontally.

boolean isHorizontalScrollBarEnabled();
//Indicate whether the horizontal scrollbar should be drawn or not.

boolean isHovered();
//Returns true if the view is currently hovered.

boolean isInEditMode();
//Indicates whether this View is currently in edit mode.

boolean isInTouchMode();
//Returns whether the device is currently in touch mode.

boolean isLayoutRequested();
//Indicates whether or not this view's layout will be requested during the next hierarchy layout pass.

boolean isLongClickable();
//Indicates whether this view reacts to long click events or not.

boolean isOpaque();
//Indicates whether this View is opaque.

boolean isPaddingRelative();
//Return if the padding as been set thru relative values setPaddingRelative(int, int, int, int); or thru

boolean isPressed();
//Indicates whether the view is currently in pressed state.

boolean isSaveEnabled();
//Indicates whether this view will save its state (that is, whether its onSaveInstanceState(); method will be called);.

boolean isSaveFromParentEnabled();
//Indicates whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent.

boolean isScrollContainer();
//Indicates whether this view is one of the set of scrollable containers in its window.

boolean isScrollbarFadingEnabled();
//Returns true if scrollbars will fade when this view is not scrolling

boolean isSelected();
//Indicates the selection state of this view.

boolean isShown();
//Returns the visibility of this view and all of its ancestors

boolean isSoundEffectsEnabled();

boolean isVerticalFadingEdgeEnabled();
//Indicate whether the vertical edges are faded when the view is scrolled horizontally.

boolean isVerticalScrollBarEnabled();
//Indicate whether the vertical scrollbar should be drawn or not.

void jumpDrawablesToCurrentState();
//Call Drawable.jumpToCurrentState(); on all Drawable objects associated with this view.

void layout(int l, int t, int r, int b);
//Assign a size and position to a view and all of its descendants
//This is the second phase of the layout mechanism.

final void measure(int widthMeasureSpec, int heightMeasureSpec);
//This is called to find out how big a view should be.

void offsetLeftAndRight(int offset);
//Offset this view's horizontal location by the specified amount of pixels.

void offsetTopAndBottom(int offset);
//Offset this view's vertical location by the specified number of pixels.

boolean onCheckIsTextEditor();
//Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it.

InputConnection onCreateInputConnection(EditorInfo outAttrs);
//Create a new InputConnection for an InputMethod to interact with the view.

boolean onDragEvent(DragEvent event);
//Handles drag events sent by the system following a call to startDrag();.

boolean onFilterTouchEventForSecurity(MotionEvent event);
//Filter the touch event to apply security policies.

void onFinishTemporaryDetach();
//Called after onStartTemporaryDetach(); when the container is done changing the view.

boolean onGenericMotionEvent(MotionEvent event);
//Implement this method to handle generic motion events.

void onHoverChanged(boolean hovered);
//Implement this method to handle hover state changes.

boolean onHoverEvent(MotionEvent event);
//Implement this method to handle hover events.

void onInitializeAccessibilityEvent(AccessibilityEvent event);
//Initializes an AccessibilityEvent with information about this View which is the event source.

void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info);
//Initializes an AccessibilityNodeInfo with information about this view.

boolean onKeyDown(@Source(USER_INPUT) int keyCode, @Source(USER_INPUT) KeyEvent event);
//Default implementation of KeyEvent.Callback.onKeyDown();: perform press of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released, if the view is enabled and clickable.

boolean onKeyLongPress(@Source(USER_INPUT) int keyCode, @Source(USER_INPUT) KeyEvent event);
//Default implementation of KeyEvent.Callback.onKeyLongPress();: always returns false (doesn't handle the event);.

boolean onKeyMultiple(@Source(USER_INPUT) int keyCode, @Source(USER_INPUT) int repeatCount, @Source(USER_INPUT) KeyEvent event);
//Default implementation of KeyEvent.Callback.onKeyMultiple();: always returns false (doesn't handle the event);.

boolean onKeyPreIme(@Source(USER_INPUT) int keyCode, @Source(USER_INPUT) KeyEvent event);
//Handle a key event before it is processed by any input method associated with the view hierarchy.

boolean onKeyShortcut(@Source(USER_INPUT) int keyCode, @Source(USER_INPUT) KeyEvent event);
//Called on the focused view when a key shortcut event is not handled.

boolean onKeyUp(@Source(USER_INPUT) int keyCode, @Source(USER_INPUT) KeyEvent event);
//Default implementation of KeyEvent.Callback.onKeyUp();: perform clicking of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released.

void onPopulateAccessibilityEvent(AccessibilityEvent event);
//Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent); giving a chance to this View to populate the accessibility event with its text content.

void onRtlPropertiesChanged(int layoutDirection);
//Called when any RTL property (layout direction or text direction or text alignment); has been changed.

void onScreenStateChanged(int screenState);
//This method is called whenever the state of the screen this view is attached to changes.

void onStartTemporaryDetach();
//This is called when a container is going to temporarily detach a child, with ViewGroup.detachViewFromParent.

boolean onTouchEvent(MotionEvent event);
//Implement this method to handle touch screen motion events.

boolean onTrackballEvent(MotionEvent event);
//Implement this method to handle trackball motion events.

void onWindowFocusChanged(boolean hasWindowFocus);
//Called when the window containing this view gains or loses focus.

void onWindowSystemUiVisibilityChanged(int visible);
//Override to find out when the window's requested system UI visibility has changed, that is the value returned by getWindowSystemUiVisibility();.

boolean performAccessibilityAction(int action, Bundle arguments);
//Performs the specified accessibility action on the view.

boolean performClick();
//Call this view's OnClickListener, if it is defined.

boolean performHapticFeedback(@Sink(VIBRATE) int feedbackConstant);
//BZZZTT!!1!
//Provide haptic feedback to the user for this view.

boolean performHapticFeedback(@Sink(VIBRATE) int feedbackConstant, int flags);
//BZZZTT!!1!
//Like performHapticFeedback(int);, with additional options.

boolean performLongClick();
//Call this view's OnLongClickListener, if it is defined.

void playSoundEffect(int soundConstant);
//Play a sound effect for this view.

boolean post(Runnable action);
//Causes the Runnable to be added to the message queue.

boolean postDelayed(Runnable action, long delayMillis);
//Causes the Runnable to be added to the message queue, to be run after the specified amount of time elapses.

void postInvalidate(int left, int top, int right, int bottom);
//Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop.

void postInvalidate();
//Cause an invalidate to happen on a subsequent cycle through the event loop.

void postInvalidateDelayed(long delayMilliseconds, int left, int top, int right, int bottom);
//Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop.

void postInvalidateDelayed(long delayMilliseconds);
//Cause an invalidate to happen on a subsequent cycle through the event loop.

void postInvalidateOnAnimation(int left, int top, int right, int bottom);
//Cause an invalidate of the specified area to happen on the next animation time step, typically the next display frame.

void postInvalidateOnAnimation();
//Cause an invalidate to happen on the next animation time step, typically the next display frame.

void postOnAnimation(Runnable action);
//Causes the Runnable to execute on the next animation time step.

void postOnAnimationDelayed(Runnable action, long delayMillis);
//Causes the Runnable to execute on the next animation time step, after the specified amount of time elapses.

void refreshDrawableState();
//Call this to force a view to update its drawable state.

boolean removeCallbacks(Runnable action);
//Removes the specified Runnable from the message queue.

void removeOnAttachStateChangeListener(View.OnAttachStateChangeListener listener);
//Remove a listener for attach state changes.

void removeOnLayoutChangeListener(View.OnLayoutChangeListener listener);
//Remove a listener for layout changes.

void requestFitSystemWindows();
//Ask that a new dispatch of fitSystemWindows(Rect); be performed.

boolean requestFocus(int direction, Rect previouslyFocusedRect);
//Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from.

final boolean requestFocus(int direction);
//Call this to try to give focus to a specific view or to one of its descendants and give it a hint about what direction focus is heading.

final boolean requestFocus();
//Call this to try to give focus to a specific view or to one of its descendants.

final boolean requestFocusFromTouch();
//Call this to try to give focus to a specific view or to one of its descendants.

void requestLayout();
//Call this when something has changed which has invalidated the layout of this view.

boolean requestRectangleOnScreen(Rect rectangle);
//Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough.

boolean requestRectangleOnScreen(Rect rectangle, boolean immediate);
//Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough.

static int resolveSize(int size, int measureSpec);
//Version of resolveSizeAndState(int, int, int); returning only the MEASURED_SIZE_MASK bits of the result.

static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState);
//Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec.

void restoreHierarchyState(SparseArray<Parcelable> container);
//Restore this view hierarchy's frozen state from the given container.

void saveHierarchyState(SparseArray<Parcelable> container);
//Store this view hierarchy's frozen state into the given container.

void scheduleDrawable(Drawable who, Runnable what, long when);
//Schedules an action on a drawable to occur at a specified time.

void scrollBy(int x, int y);
//Move the scrolled position of your view.

void scrollTo(int x, int y);
//Set the scrolled position of your view.

void sendAccessibilityEvent(int eventType);
//Sends an accessibility event of the given type.

void sendAccessibilityEventUnchecked(AccessibilityEvent event);
//This method behaves exactly as sendAccessibilityEvent(int); but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled.

void setAccessibilityDelegate(View.AccessibilityDelegate delegate);
//Sets a delegate for implementing accessibility support via composition as opposed to inheritance.

void setActivated(boolean activated);
//Changes the activated state of this view.

void setAlpha(float alpha);
//Sets the opacity of the view.

void setAnimation(@Sink(DISPLAY) Animation animation);
//Sets the next animation to play for this view.

void setBackground(@Sink(DISPLAY) Drawable background);
//Set the background to a given Drawable, or remove the background.

void setBackgroundColor(int color);
//Sets the background color for this view.

void setBackgroundDrawable(@Sink(DISPLAY) Drawable background);
//This method was deprecated in API level 16. use setBackground(Drawable); instead

void setBackgroundResource(int resid);
//Set the background to a given resource.

final void setBottom(int bottom);
//Sets the bottom position of this view relative to its parent.

void setCameraDistance(float distance);
//Sets the distance along the Z axis (orthogonal to the X/Y plane on which views are drawn); from the camera to this view.

void setClickable(boolean clickable);
//Enables or disables click events for this view.

void setContentDescription(CharSequence contentDescription);
//Sets the View description.

void setDrawingCacheBackgroundColor(int color);
//Setting a solid background color for the drawing cache's bitmaps will improve performance and memory usage.

void setDrawingCacheEnabled(boolean enabled);
//Enables or disables the drawing cache.

void setDrawingCacheQuality(int quality);
//Set the drawing cache quality of this view.

void setDuplicateParentStateEnabled(boolean enabled);
//Enables or disables the duplication of the parent's state into this view.

void setEnabled(@Sink(DISPLAY) boolean enabled);
//Set the enabled state of this view.

void setFadingEdgeLength(int length);
//Set the size of the faded edge used to indicate that more content in this view is available.

void setFilterTouchesWhenObscured(boolean enabled);
//Sets whether the framework should discard touches when the view's window is obscured by another visible window.

void setFitsSystemWindows(boolean fitSystemWindows);
//Sets whether or not this view should account for system screen decorations such as the status bar and inset its content; that is, controlling whether the default implementation of fitSystemWindows(Rect); will be executed.

void setFocusable(boolean focusable);
//Set whether this view can receive the focus.

void setFocusableInTouchMode(boolean focusableInTouchMode);
//Set whether this view can receive focus while in touch mode.

void setHapticFeedbackEnabled(boolean hapticFeedbackEnabled);
//Set whether this view should have haptic feedback for events such as long presses.

void setHasTransientState(boolean hasTransientState);
//Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible.

void setHorizontalFadingEdgeEnabled(boolean horizontalFadingEdgeEnabled);
//Define whether the horizontal edges should be faded when this view is scrolled horizontally.

void setHorizontalScrollBarEnabled(boolean horizontalScrollBarEnabled);
//Define whether the horizontal scrollbar should be drawn or not.

void setHovered(boolean hovered);
//Sets whether the view is currently hovered.

void setId(int id);
//Sets the identifier for this view.

void setImportantForAccessibility(int mode);
//Sets how to determine whether this view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen.

void setKeepScreenOn(boolean keepScreenOn);
//Controls whether the screen should remain on, modifying the value of KEEP_SCREEN_ON.

void setLabelFor(int id);
//Sets the id of a view for which this view serves as a label for accessibility purposes.

void setLayerPaint(Paint paint);
//Updates the Paint object used with the current layer (used only if the current layer type is not set to LAYER_TYPE_NONE);.

void setLayerType(int layerType, Paint paint);
//Specifies the type of layer backing this view.

void setLayoutDirection(int layoutDirection);
//Set the layout direction for this view.

void setLayoutParams(ViewGroup.LayoutParams params);
//Set the layout parameters associated with this view.

final void setLeft(int left);
//Sets the left position of this view relative to its parent.

void setLongClickable(boolean longClickable);
//Enables or disables long click events for this view.

void setMinimumHeight(int minHeight);
//Sets the minimum height of the view.

void setMinimumWidth(int minWidth);
//Sets the minimum width of the view.

void setNextFocusDownId(int nextFocusDownId);
//Sets the id of the view to use when the next focus is FOCUS_DOWN.

void setNextFocusForwardId(int nextFocusForwardId);
//Sets the id of the view to use when the next focus is FOCUS_FORWARD.

void setNextFocusLeftId(int nextFocusLeftId);
//Sets the id of the view to use when the next focus is FOCUS_LEFT.

void setNextFocusRightId(int nextFocusRightId);
//Sets the id of the view to use when the next focus is FOCUS_RIGHT.

void setNextFocusUpId(int nextFocusUpId);
//Sets the id of the view to use when the next focus is FOCUS_UP.

void setOnClickListener(View.OnClickListener l);
//Register a callback to be invoked when this view is clicked.

void setOnCreateContextMenuListener(View.OnCreateContextMenuListener l);
//Register a callback to be invoked when the context menu for this view is being built.

void setOnDragListener(View.OnDragListener l);
//Register a drag event listener callback object for this View.

void setOnFocusChangeListener(View.OnFocusChangeListener l);
//Register a callback to be invoked when focus of this view changed.

void setOnGenericMotionListener(View.OnGenericMotionListener l);
//Register a callback to be invoked when a generic motion event is sent to this view.

void setOnHoverListener(View.OnHoverListener l);
//Register a callback to be invoked when a hover event is sent to this view.

void setOnKeyListener(View.OnKeyListener l);
//Register a callback to be invoked when a hardware key is pressed in this view.

void setOnLongClickListener(View.OnLongClickListener l);
//Register a callback to be invoked when this view is clicked and held.

void setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener l);
//Set a listener to receive callbacks when the visibility of the system bar changes.

void setOnTouchListener(View.OnTouchListener l);
//Register a callback to be invoked when a touch event is sent to this view.

void setOverScrollMode(int overScrollMode);
//Set the over-scroll mode for this view.

void setPadding(int left, int top, int right, int bottom);
//Sets the padding.

void setPaddingRelative(int start, int top, int end, int bottom);
//Sets the relative padding.

void setPivotX(float pivotX);
//Sets the x location of the point around which the view is rotated and scaled.

void setPivotY(float pivotY);
//Sets the y location of the point around which the view is rotated and scaled.

void setPressed(boolean pressed);
//Sets the pressed state for this view.

final void setRight(int right);
//Sets the right position of this view relative to its parent.

void setRotation(float rotation);
//Sets the degrees that the view is rotated around the pivot point.

void setRotationX(float rotationX);
//Sets the degrees that the view is rotated around the horizontal axis through the pivot point.

void setRotationY(float rotationY);
//Sets the degrees that the view is rotated around the vertical axis through the pivot point.

void setSaveEnabled(boolean enabled);
//Controls whether the saving of this view's state is enabled (that is, whether its onSaveInstanceState(); method will be called);.

void setSaveFromParentEnabled(boolean enabled);
//Controls whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent.

void setScaleX(float scaleX);
//Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width.

void setScaleY(float scaleY);
//Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view's unscaled width.

void setScrollBarDefaultDelayBeforeFade(int scrollBarDefaultDelayBeforeFade);
//Define the delay before scrollbars fade.

void setScrollBarFadeDuration(int scrollBarFadeDuration);
//Define the scrollbar fade duration.

void setScrollBarSize(int scrollBarSize);
//Define the scrollbar size.

void setScrollBarStyle(int style);
//Specify the style of the scrollbars.

void setScrollContainer(boolean isScrollContainer);
//Change whether this view is one of the set of scrollable containers in its window.

void setScrollX(int value);
//Set the horizontal scrolled position of your view.

void setScrollY(int value);
//Set the vertical scrolled position of your view.

void setScrollbarFadingEnabled(boolean fadeScrollbars);
//Define whether scrollbars will fade when the view is not scrolling.

void setSelected(boolean selected);
//Changes the selection state of this view.

void setSoundEffectsEnabled(boolean soundEffectsEnabled);
//Set whether this view should have sound effects enabled for events such as clicking and touching.

void setSystemUiVisibility(int visibility);
//Request that the visibility of the status bar or other screen/window decorations be changed.

void setTag(int key, Object tag);
//Sets a tag associated with this view and a key.

void setTag(Object tag);
//Sets the tag associated with this view.

void setTextAlignment(int textAlignment);
//Set the text alignment.

void setTextDirection(int textDirection);
//Set the text direction.

final void setTop(int top);
//Sets the top position of this view relative to its parent.

void setTouchDelegate(TouchDelegate delegate);
//Sets the TouchDelegate for this View.

void setTranslationX(float translationX);
//Sets the horizontal location of this view relative to its left position.

void setTranslationY(float translationY);
//Sets the vertical location of this view relative to its top position.

void setVerticalFadingEdgeEnabled(boolean verticalFadingEdgeEnabled);
//Define whether the vertical edges should be faded when this view is scrolled vertically.

void setVerticalScrollBarEnabled(boolean verticalScrollBarEnabled);
//Define whether the vertical scrollbar should be drawn or not.

void setVerticalScrollbarPosition(int position);
//Set the position of the vertical scroll bar.

void setVisibility(int visibility);
//Set the enabled state of this view.

void setWillNotCacheDrawing(boolean willNotCacheDrawing);
//When a View's drawing cache is enabled, drawing is redirected to an offscreen bitmap.

void setWillNotDraw(boolean willNotDraw);
//If this view doesn't do any drawing on its own, set this flag to allow further optimizations.

void setX(float x);
//Sets the visual x position of this view, in pixels.

void setY(float y);
//Sets the visual y position of this view, in pixels.

boolean showContextMenu();
//Bring up the context menu for this view.

ActionMode startActionMode(ActionMode.Callback callback);
//Start an action mode.

void startAnimation(@Sink(DISPLAY) Animation animation);
//Start the specified animation now.

final boolean startDrag(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags);
//Starts a drag and drop operation.

String toString();
//Returns a string containing a concise, human-readable description of this object.

void unscheduleDrawable(Drawable who);
//Unschedule any events associated with the given Drawable.

void unscheduleDrawable(Drawable who, Runnable what);
//Cancels a scheduled action on a drawable.

boolean willNotCacheDrawing();
//Returns whether or not this View can cache its drawing or not.

boolean willNotDraw();
//Returns whether or not this View draws on its own.

//Protected Methods
boolean awakenScrollBars(int startDelay);
//Trigger the scrollbars to draw.

boolean awakenScrollBars(int startDelay, boolean invalidate);
//Trigger the scrollbars to draw.

boolean awakenScrollBars();
//Trigger the scrollbars to draw.

int computeHorizontalScrollExtent();
//Compute the horizontal extent of the horizontal scrollbar's thumb within the horizontal range.

int computeHorizontalScrollOffset();
//Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal range.

int computeHorizontalScrollRange();
//Compute the horizontal range that the horizontal scrollbar represents.

int computeVerticalScrollExtent();
//Compute the vertical extent of the horizontal scrollbar's thumb within the vertical range.

int computeVerticalScrollOffset();
//Compute the vertical offset of the vertical scrollbar's thumb within the horizontal range.

int computeVerticalScrollRange();
//Compute the vertical range that the vertical scrollbar represents.

void dispatchDraw(Canvas canvas);
//Called by draw to draw the child views.

boolean dispatchGenericFocusedEvent(MotionEvent event);
//Dispatch a generic motion event to the currently focused view.

boolean dispatchGenericPointerEvent(MotionEvent event);
//Dispatch a generic motion event to the view under the first pointer.

boolean dispatchHoverEvent(MotionEvent event);
//Dispatch a hover event.

void dispatchRestoreInstanceState(SparseArray<Parcelable> container);
//Called by restoreHierarchyState(android.util.SparseArray); to retrieve the state for this view and its children.

void dispatchSaveInstanceState(SparseArray<Parcelable> container);
//Called by saveHierarchyState(android.util.SparseArray); to store the state for this view and its children.

void dispatchSetActivated(boolean activated);
//Dispatch setActivated to all of this View's children.

void dispatchSetPressed(boolean pressed);
//Dispatch setPressed to all of this View's children.

void dispatchSetSelected(boolean selected);
//Dispatch setSelected to all of this View's children.

void dispatchVisibilityChanged(View changedView, int visibility);
//Dispatch a view visibility change down the view hierarchy.

void drawableStateChanged();
//This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown.

boolean fitSystemWindows(Rect insets);
//Called by the view hierarchy when the content insets for a window have changed, to allow it to adjust its content to fit within those windows.

float getBottomFadingEdgeStrength();
//Returns the strength, or intensity, of the bottom faded edge.

int getBottomPaddingOffset();
//Amount by which to extend the bottom fading region.

ContextMenu.ContextMenuInfo getContextMenuInfo();
//Views should implement this if they have extra information to associate with the context menu.

int getHorizontalScrollbarHeight();
//Returns the height of the horizontal scrollbar.

float getLeftFadingEdgeStrength();
//Returns the strength, or intensity, of the left faded edge.

int getLeftPaddingOffset();
//Amount by which to extend the left fading region.

float getRightFadingEdgeStrength();
//Returns the strength, or intensity, of the right faded edge.

int getRightPaddingOffset();
//Amount by which to extend the right fading region.

int getSuggestedMinimumHeight();
//Returns the suggested minimum height that the view should use.

int getSuggestedMinimumWidth();
//Returns the suggested minimum width that the view should use.

float getTopFadingEdgeStrength();
//Returns the strength, or intensity, of the top faded edge.

int getTopPaddingOffset();
//Amount by which to extend the top fading region.

int getWindowAttachCount();


boolean isPaddingOffsetRequired();
//If the View draws content inside its padding and enables fading edges, it needs to support padding offsets.

static int[] mergeDrawableStates(int[] baseState, int[] additionalState);
//Merge your own state values in additionalState into the base state values baseState that were returned by onCreateDrawableState(int);.

void onAnimationEnd();
//Invoked by a parent ViewGroup to notify the end of the animation currently associated with this view.

void onAnimationStart();
//Invoked by a parent ViewGroup to notify the start of the animation currently associated with this view.

void onAttachedToWindow();
//This is called when the view is attached to a window.

void onConfigurationChanged(Configuration newConfig);
//Called when the current configuration of the resources being used by the application have changed.

void onCreateContextMenu(ContextMenu menu);
//Views should implement this if the view itself is going to add items to the context menu.

int[] onCreateDrawableState(int extraSpace);
//Generate the new Drawable state for this view.

void onDetachedFromWindow();
//This is called when the view is detached from a window.

void onDisplayHint(int hint);
//Gives this view a hint about whether is displayed or not.

void onDraw(Canvas canvas);
//Implement this to do your drawing.

final void onDrawScrollBars(Canvas canvas);
//Request the drawing of the horizontal and the vertical scrollbar.

void onFinishInflate();
//Finalize inflating a view from XML.

void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect);
//Called by the view system when the focus state of this view changes.

void onLayout(boolean changed, int left, int top, int right, int bottom);
//Called from layout when this view should assign a size and position to each of its children.

void onMeasure(int widthMeasureSpec, int heightMeasureSpec);
//Measure the view and its content to determine the measured width and the measured height.

void onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY);
//Called by overScrollBy(int, int, int, int, int, int, int, int, boolean); to respond to the results of an over-scroll operation.

void onRestoreInstanceState(Parcelable state);
//Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState();.

Parcelable onSaveInstanceState();
//Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state.

void onScrollChanged(int l, int t, int oldl, int oldt);
//This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents);.

boolean onSetAlpha(int alpha);
//Invoked if there is a Transform that involves alpha.

void onSizeChanged(int w, int h, int oldw, int oldh);
//This is called during layout when the size of this view has changed.

void onVisibilityChanged(View changedView, int visibility);
//Called when the visibility of the view or an ancestor of the view is changed.

void onWindowVisibilityChanged(int visibility);
//Called when the window containing has change its visibility (between GONE, INVISIBLE, and VISIBLE);.

boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX, int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent);
//Scroll the view with standard behavior for scrolling beyond the normal content boundaries.

final void setMeasuredDimension(int measuredWidth, int measuredHeight);
//This mehod must be called by onMeasure(int, int); to store the measured width and measured height.

boolean verifyDrawable(Drawable who);
//If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying.

void setAccessibilityLiveRegion(int mode);

int getAccessibilityLiveRegion();

}
class View$BaseSavedState{
        BaseSavedState(Parcelable superState);
        BaseSavedState(Parcel source);
}
class View$MeasureSpec {
static final int EXACTLY;
static final int UNSPECIFIED;

static int getMode(int measureSpec);
//Extracts the mode from the supplied measure specification.

static int getSize(int measureSpec);
//Extracts the size from the supplied measure specification.

static int makeMeasureSpec(int size, int mode);
//Creates a measure specification based on the supplied size and mode.

static String toString(int measureSpec);
//Returns a String representation of the specified measure specification.



}
class View$AccessibilityDelegate{
        boolean onRequestSendAccessibilityEvent(ViewGroup host, View child, AccessibilityEvent event);
        void onPopulateAccessibilityEvent(View host, AccessibilityEvent event);
        AccessibilityDelegate();
        void onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfo info);
        void onInitializeAccessibilityEvent(View host, AccessibilityEvent event);
        boolean dispatchPopulateAccessibilityEvent(View host, AccessibilityEvent event);
        void sendAccessibilityEventUnchecked(View host, AccessibilityEvent event);
        void sendAccessibilityEvent(View host, int eventType);
}

class View$OnKeyListener{
        boolean onKey(View arg0, int arg1, KeyEvent arg2);
}

class View$OnClickListener{
        void onClick(View arg0);
}

class View$OnFocusChangeListener{
        void onFocusChange(View arg0, boolean arg1);
}

class View$OnLongClickListener{
        boolean onLongClick(View arg0);
}

class View$OnCreateContextMenuListener{
        void onCreateContextMenu(ContextMenu arg0, View arg1, ContextMenuInfo arg2);
}

class View$OnTouchListener{
        boolean onTouch(View arg0, MotionEvent arg1);
}

class ViewConfiguration {
    
static ViewConfiguration get(Context context);
//Returns a configuration for the specified context.

static int getDoubleTapTimeout();

static int getEdgeSlop();
//This method was deprecated in API level 3. Use getScaledEdgeSlop(); instead.

static int getFadingEdgeLength();
//This method was deprecated in API level 3. Use getScaledFadingEdgeLength(); instead.

static long getGlobalActionKeyTimeout();
//The amount of time a user needs to press the relevant key to bring up the global actions dialog.

static int getJumpTapTimeout();

static int getKeyRepeatDelay();

static int getKeyRepeatTimeout();

static int getLongPressTimeout();

static int getMaximumDrawingCacheSize();
//This method was deprecated in API level 3. Use getScaledMaximumDrawingCacheSize(); instead.

static int getMaximumFlingVelocity();
//This method was deprecated in API level 4. Use getScaledMaximumFlingVelocity(); instead.

static int getMinimumFlingVelocity();
//This method was deprecated in API level 3. Use getScaledMinimumFlingVelocity(); instead.

static int getPressedStateDuration();

int getScaledDoubleTapSlop();

int getScaledEdgeSlop();

int getScaledFadingEdgeLength();

int getScaledMaximumDrawingCacheSize();
//The maximum drawing cache size expressed in bytes.

int getScaledMaximumFlingVelocity();

int getScaledMinimumFlingVelocity();

int getScaledOverflingDistance();

int getScaledOverscrollDistance();

int getScaledPagingTouchSlop();

int getScaledScrollBarSize();

int getScaledTouchSlop();

int getScaledWindowTouchSlop();

static int getScrollBarFadeDuration();

static int getScrollBarSize();
//This method was deprecated in API level 3. Use getScaledScrollBarSize(); instead.

static int getScrollDefaultDelay();

static float getScrollFriction();
//The amount of friction applied to scrolls and flings.

static int getTapTimeout();

static int getTouchSlop();
//This method was deprecated in API level 3. Use getScaledTouchSlop(); instead.

static int getWindowTouchSlop();
//This method was deprecated in API level 3. Use getScaledWindowTouchSlop(); instead.

static long getZoomControlsTimeout();
//The amount of time that the zoom controls should be displayed on the screen expressed in milliseconds.

boolean hasPermanentMenuKey();
//Report if the device has a permanent menu key available to the user.

    
}

class ViewGroup$MarginLayoutParams{
        int topMargin;
        int leftMargin;
        int rightMargin;
        int bottomMargin;
        MarginLayoutParams(Context c, AttributeSet attrs);
        MarginLayoutParams(int width, int height);
        MarginLayoutParams(MarginLayoutParams source);
        MarginLayoutParams(LayoutParams source);
		void setMargins(int left, int top, int right, int bottom);
		
		boolean isMarginRelative();
int getLayoutDirection();
int getMarginEnd();
int getMarginStart();
void resolveLayoutDirection(int layoutDirection);
void setLayoutDirection(int layoutDirection);
void setMarginEnd(int end);
void setMarginStart(int start);

}
class ViewGroup$LayoutParams {
static final int WRAP_CONTENT;
int height;
static final int FILL_PARENT;
static final int MATCH_PARENT;
int width;
LayoutParams(int width, int height);
void resolveLayoutDirection(int layoutDirection);
//Resolve layout parameters depending on the layout direction.

//Protected Methods
void setBaseAttributes(TypedArray a, int widthAttr, int heightAttr);
//Extracts the layout parameters from the supplied attributes.

}

class ViewGroup {
static final int FOCUS_BEFORE_DESCENDANTS;

protected void onDetachedFromWindow();
protected void onAttachedToWindow();
void setLayoutMode(int layoutMode);
int getLayoutMode();


void setPadding(int left, int top, int right, int bottom);

addChildrenForAccessibility(ArrayList<View> childrenForAccessibility);
//Adds the children of a given View for accessibility.

void addFocusables(ArrayList<View> views, int direction, int focusableMode);
//Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself); to views.

boolean addStatesFromChildren();
//Returns whether this ViewGroup's drawable states also include its children's drawable states.

void addTouchables(ArrayList<View> views);
//Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself); to views.

void addView(@Sink(DISPLAY) View child, int index, ViewGroup.LayoutParams params);
//Adds a child view with the specified layout parameters.

void addView(@Sink(DISPLAY) View child, ViewGroup.LayoutParams params);
//Adds a child view with the specified layout parameters.

void addView(@Sink(DISPLAY) View child, int index);
//Adds a child view.

void addView(@Sink(DISPLAY) View child);
//Adds a child view.

void addView(@Sink(DISPLAY) View child, int width, int height);
//Adds a child view with this ViewGroup's default layout parameters and the specified width and height.

void bringChildToFront(@Sink(DISPLAY) View child);
//Change the z order of the child so it's on top of all other children

void childDrawableStateChanged(View child);
//If addStatesFromChildren(); is true, refreshes this group's drawable state (to include the states from its children);.

void clearChildFocus(View child);
//Called when a child of this parent is giving up focus

void clearDisappearingChildren();
//Removes any pending animations for views that have been removed.

void clearFocus();
//Called when this view wants to give up focus.

void dispatchConfigurationChanged(Configuration newConfig);
//Dispatch a notification about a resource configuration change down the view hierarchy.

void dispatchDisplayHint(int hint);
//Dispatch a hint about whether this view is displayed.

boolean dispatchDragEvent(DragEvent event);
//Detects if this View is enabled and has a drag event listener.

boolean dispatchKeyEvent(@Source(USER_INPUT) KeyEvent event);
//Dispatch a key event to the next view on the focus path.

boolean dispatchKeyEventPreIme(@Source(USER_INPUT) KeyEvent event);
//Dispatch a key event before it is processed by any input method associated with the view hierarchy.

boolean dispatchKeyShortcutEvent(@Source(USER_INPUT) KeyEvent event);
//Dispatches a key shortcut event.

void dispatchSetActivated(boolean activated);
//Dispatch setActivated to all of this View's children.

void dispatchSetSelected(boolean selected);
//Dispatch setSelected to all of this View's children.

void dispatchSystemUiVisibilityChanged(int visible);
//Dispatch callbacks to setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener); down the view hierarchy.

boolean dispatchTouchEvent(MotionEvent ev);
//Pass the touch screen motion event down to the target view, or this view if it is the target.

boolean dispatchTrackballEvent(MotionEvent event);
//Pass a trackball motion event down to the focused view.

boolean dispatchUnhandledMove(View focused, int direction);
//This method is the last chance for the focused view and its ancestors to respond to an arrow key.

void dispatchWindowFocusChanged(boolean hasFocus);
//Called when the window containing this view gains or loses window focus.

void dispatchWindowSystemUiVisiblityChanged(int visible);
//Dispatch callbacks to onWindowSystemUiVisibilityChanged(int); down the view hierarchy.

void dispatchWindowVisibilityChanged(int visibility);
//Dispatch a window visibility change down the view hierarchy.

void endViewTransition(View view);
//This method should always be called following an earlier call to startViewTransition(View);.

View findFocus();
//Find the view in the hierarchy rooted at this view that currently has focus.

void findViewsWithText(ArrayList<View> outViews, CharSequence text, int flags);
//Finds the Views that contain given text.

View focusSearch(View focused, int direction);
//Find the nearest view in the specified direction that wants to take focus.

void focusableViewAvailable(View v);
//Tells the parent that a new focusable view has become available.

boolean gatherTransparentRegion(Region region);
//This is used by the RootView to perform an optimization when the view hierarchy contains one or several SurfaceView.

ViewGroup.LayoutParams generateLayoutParams(AttributeSet attrs);
//Returns a new set of layout parameters based on the supplied attributes set.

View getChildAt(int index);
//Returns the view at the specified position in the group.

int getChildCount();
//Returns the number of children in the group.

static int getChildMeasureSpec(int spec, int padding, int childDimension);
//Does the hard part of measureChildren: figuring out the MeasureSpec to pass to a particular child.

boolean getChildVisibleRect(View child, Rect r, Point offset);
//Compute the visible part of a rectangular region defined in terms of a child view's coordinates.

int getDescendantFocusability();
//Gets the descendant focusability of this view group.

View getFocusedChild();
//Returns the focused child of this view, if any.

LayoutAnimationController getLayoutAnimation();
//Returns the layout animation controller used to animate the group's children.

Animation.AnimationListener getLayoutAnimationListener();
//Returns the animation listener to which layout animation events are sent.

LayoutTransition getLayoutTransition();
//Gets the LayoutTransition object for this ViewGroup.

int getPersistentDrawingCache();
//Returns an integer indicating what types of drawing caches are kept in memory.

boolean hasFocus();
//Returns true if this view has or contains focus

boolean hasFocusable();
//Returns true if this view is focusable or if it contains a reachable View for which hasFocusable(); returns true.

int indexOfChild(View child);
//Returns the position in the group of the specified child view.

final void invalidateChild(View child, Rect dirty);
//Don't call or override this method.

ViewParent invalidateChildInParent(int[] location, Rect dirty);
//Don't call or override this method.

boolean isAlwaysDrawnWithCacheEnabled();
//Indicates whether this ViewGroup will always try to draw its children using their drawing cache.

boolean isAnimationCacheEnabled();
//Indicates whether the children's drawing cache is used during a layout animation.

boolean isMotionEventSplittingEnabled();
//Returns true if MotionEvents dispatched to this ViewGroup can be split to multiple children.

void jumpDrawablesToCurrentState();
//Call Drawable.jumpToCurrentState(); on all Drawable objects associated with this view.

final void layout(int l, int t, int r, int b);
//Assign a size and position to a view and all of its descendants
//This is the second phase of the layout mechanism.

final void offsetDescendantRectToMyCoords(View descendant, Rect rect);
//Offset a rectangle that is in a descendant's coordinate space into our coordinate space.

final void offsetRectIntoDescendantCoords(View descendant, Rect rect);
//Offset a rectangle that is in our coordinate space into an ancestor's coordinate space.

boolean onInterceptHoverEvent(MotionEvent event);
//Implement this method to intercept hover events before they are handled by child views.

boolean onInterceptTouchEvent(MotionEvent ev);
//Implement this method to intercept all touch screen motion events.

boolean onRequestSendAccessibilityEvent(View child, AccessibilityEvent event);
//Called when a child has requested sending an AccessibilityEvent and gives an opportunity to its parent to augment the event.

void recomputeViewAttributes(View child);
//Tell view hierarchy that the global view attributes need to be re-evaluated.

void removeAllViews();
//Call this method to remove all child views from the ViewGroup.

void removeAllViewsInLayout();
//Called by a ViewGroup subclass to remove child views from itself, when it must first know its size on screen before it can calculate how many child views it will render.

void removeView(View view);
//Note: do not invoke this method from draw(android.graphics.Canvas);, onDraw(android.graphics.Canvas);, dispatchDraw(android.graphics.Canvas); or any related method.

void removeViewAt(int index);
//Removes the view at the specified position in the group.

void removeViewInLayout(View view);
//Removes a view during layout.

void removeViews(int start, int count);
//Removes the specified range of views from the group.

void removeViewsInLayout(int start, int count);
//Removes a range of views during layout.

void requestChildFocus(View child, View focused);
//Called when a child of this parent wants focus

boolean requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate);
//Called when a child of this group wants a particular rectangle to be positioned onto the screen.

void requestDisallowInterceptTouchEvent(boolean disallowIntercept);
//Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent(MotionEvent);.

boolean requestFocus(int direction, Rect previouslyFocusedRect);
//Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. Looks for a view to give focus to respecting the setting specified by getDescendantFocusability();.

boolean requestSendAccessibilityEvent(View child, AccessibilityEvent event);
//Called by a child to request from its parent to send an AccessibilityEvent.

void requestTransparentRegion(View child);
//Called when a child wants the view hierarchy to gather and report transparent regions to the window compositor.

void scheduleLayoutAnimation();
//Schedules the layout animation to be played after the next layout pass of this view group.

void setAddStatesFromChildren(boolean addsStates);
//Sets whether this ViewGroup's drawable states also include its children's drawable states.

void setAlwaysDrawnWithCacheEnabled(boolean always);
//Indicates whether this ViewGroup will always try to draw its children using their drawing cache.

void setAnimationCacheEnabled(boolean enabled);
//Enables or disables the children's drawing cache during a layout animation.

void setClipChildren(boolean clipChildren);
//By default, children are clipped to their bounds before drawing.

void setClipToPadding(boolean clipToPadding);
//By default, children are clipped to the padding of the ViewGroup.

void setDescendantFocusability(int focusability);
//Set the descendant focusability of this view group.

void setLayoutAnimation(LayoutAnimationController controller);
//Sets the layout animation controller used to animate the group's children after the first layout.

void setLayoutAnimationListener(Animation.AnimationListener animationListener);
//Specifies the animation listener to which layout animation events must be sent.

void setLayoutTransition(LayoutTransition transition);
//Sets the LayoutTransition object for this ViewGroup.

void setMotionEventSplittingEnabled(boolean split);
//Enable or disable the splitting of MotionEvents to multiple children during touch event dispatch.

void setOnHierarchyChangeListener(ViewGroup.OnHierarchyChangeListener listener);
//Register a callback to be invoked when a child is added to or removed from this view.

void setPersistentDrawingCache(int drawingCacheToKeep);
//Indicates what types of drawing caches should be kept in memory after they have been created.

boolean shouldDelayChildPressedState();
//Return true if the pressed state should be delayed for children or descendants of this ViewGroup.

boolean showContextMenuForChild(@Sink(DISPLAY) View originalView);
//Bring up a context menu for the specified view or its ancestors.

ActionMode startActionModeForChild(View originalView, ActionMode.Callback callback);
//Start an action mode for the specified view.

void startLayoutAnimation();
//Runs the layout animation.

void startViewTransition(View view);
//This method tells the ViewGroup that the given View object, which should have this ViewGroup as its parent, should be kept around (re-displayed when the ViewGroup draws its children); even if it is removed from its parent.

void updateViewLayout(View view, ViewGroup.LayoutParams params);

//Protected Methods
boolean addViewInLayout(@Sink(DISPLAY) View child, int index, ViewGroup.LayoutParams params, boolean preventRequestLayout);
//Adds a view during layout.

boolean addViewInLayout(@Sink(DISPLAY) View child, int index, ViewGroup.LayoutParams params);
//Adds a view during layout.

void attachLayoutAnimationParameters(View child, ViewGroup.LayoutParams params, int index, int count);
//Subclasses should override this method to set layout animation parameters on the supplied child.

void attachViewToParent(@Sink(DISPLAY) View child, int index, ViewGroup.LayoutParams params);
//Attaches a view to this view group.

boolean canAnimate();
//Indicates whether the view group has the ability to animate its children after the first layout.

boolean checkLayoutParams(ViewGroup.LayoutParams p);

void cleanupLayoutState(View child);
//Prevents the specified child to be laid out during the next layout pass.

void debug(int depth);
//Prints information about this view in the log output, with the tag VIEW_LOG_TAG.

void detachAllViewsFromParent();
//Detaches all views from the parent.

void detachViewFromParent(View child);
//Detaches a view from its parent.

void detachViewFromParent(int index);
//Detaches a view from its parent.

void detachViewsFromParent(int start, int count);
//Detaches a range of views from their parents.

void dispatchDraw(Canvas canvas);
//Called by draw to draw the child views.

void dispatchFreezeSelfOnly(SparseArray<Parcelable> container);
//Perform dispatching of a saveHierarchyState(android.util.SparseArray); freeze();} to only this view, not to its children.

boolean dispatchGenericFocusedEvent(MotionEvent event);
//Dispatch a generic motion event to the currently focused view.

boolean dispatchGenericPointerEvent(MotionEvent event);
//Dispatch a generic motion event to the view under the first pointer.

boolean dispatchHoverEvent(MotionEvent event);
//Dispatch a hover event.

void dispatchRestoreInstanceState(SparseArray<Parcelable> container);
//Called by restoreHierarchyState(android.util.SparseArray); to retrieve the state for this view and its children.

void dispatchSaveInstanceState(SparseArray<Parcelable> container);
//Called by saveHierarchyState(android.util.SparseArray); to store the state for this view and its children.

void dispatchSetPressed(boolean pressed);
//Dispatch setPressed to all of this View's children.

void dispatchThawSelfOnly(SparseArray<Parcelable> container);
//Perform dispatching of a restoreHierarchyState(android.util.SparseArray); to only this view, not to its children.

void dispatchVisibilityChanged(View changedView, int visibility);
//Dispatch a view visibility change down the view hierarchy.

boolean drawChild(Canvas canvas, @Sink(DISPLAY) View child, long drawingTime);
//Draw one child of this View Group.

void drawableStateChanged();
//This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown.

boolean fitSystemWindows(Rect insets);
//Called by the view hierarchy when the content insets for a window have changed, to allow it to adjust its content to fit within those windows.

ViewGroup.LayoutParams generateDefaultLayoutParams();
//Returns a set of default layout parameters.

ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p);
//Returns a safe set of layout parameters based on the supplied layout params.

int getChildDrawingOrder(int childCount, int i);
//Returns the index of the child to draw for this iteration.

boolean getChildStaticTransformation(View child, Transformation t);
//Sets t to be the static transformation of the child, if set, returning a boolean to indicate whether a static transform was set.

boolean isChildrenDrawingOrderEnabled();
//Indicates whether the ViewGroup is drawing its children in the order defined by getChildDrawingOrder(int, int);.

boolean isChildrenDrawnWithCacheEnabled();
//Indicates whether the ViewGroup is currently drawing its children using their drawing cache.

void measureChild(View child, int parentWidthMeasureSpec, int parentHeightMeasureSpec);
//Ask one of the children of this view to measure itself, taking into account both the MeasureSpec requirements for this view and its padding.

void measureChildWithMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed);
//Ask one of the children of this view to measure itself, taking into account both the MeasureSpec requirements for this view and its padding and margins.

void measureChildren(int widthMeasureSpec, int heightMeasureSpec);
//Ask all of the children of this view to measure themselves, taking into account both the MeasureSpec requirements for this view and its padding.

void onAnimationEnd();
//Invoked by a parent ViewGroup to notify the end of the animation currently associated with this view.

void onAnimationStart();
//Invoked by a parent ViewGroup to notify the start of the animation currently associated with this view.

int[] onCreateDrawableState(int extraSpace);
//Generate the new Drawable state for this view.

abstract void onLayout(boolean changed, int l, int t, int r, int b);
//Called from layout when this view should assign a size and position to each of its children.

boolean onRequestFocusInDescendants(int direction, Rect previouslyFocusedRect);
//Look for a descendant to call requestFocus(); on.

void removeDetachedView(View child, boolean animate);
//Finishes the removal of a detached view.

void setChildrenDrawingCacheEnabled(boolean enabled);
//Enables or disables the drawing cache for each child of this view group.

void setChildrenDrawingOrderEnabled(boolean enabled);
//Tells the ViewGroup whether to draw its children in the order defined by the method getChildDrawingOrder(int, int);.

void setChildrenDrawnWithCacheEnabled(boolean enabled);
//Tells the ViewGroup to draw its children using their drawing cache.

void setStaticTransformationsEnabled(boolean enabled);
//When this property is set to true, this ViewGroup supports static transformations on children; this causes getChildStaticTransformation(View, android.view.animation.Transformation); to be invoked when a child is drawn.
}

class ViewParent {

 
//abstract void bringChildToFront(View child);
//Change the z order of the child so it's on top of all other children

//abstract void childDrawableStateChanged(View child);
//This method is called on the parent when a child's drawable state has changed.

//abstract void clearChildFocus(View child);
//Called when a child of this parent is giving up focus

//abstract void createContextMenu(ContextMenu menu);
//Have the parent populate the specified context menu if it has anything to add (and then recurse on its parent);.

//abstract View focusSearch(View v, int direction);
//Find the nearest view in the specified direction that wants to take focus

//abstract void focusableViewAvailable(View v);
//Tells the parent that a new focusable view has become available.

//abstract boolean getChildVisibleRect(View child, Rect r, Point offset);
//Compute the visible part of a rectangular region defined in terms of a child view's coordinates.

abstract ViewParent getParent();
//Returns the parent if it exists, or null.

//abstract ViewParent getParentForAccessibility();
//Gets the parent of a given View for accessibility.

//abstract void invalidateChild(View child, Rect r);
//All or part of a child is dirty and needs to be redrawn.

//abstract ViewParent invalidateChildInParent(int[] location, Rect r);
//All or part of a child is dirty and needs to be redrawn.

//abstract boolean isLayoutRequested();
//Indicates whether layout was requested on this view parent.

//abstract void recomputeViewAttributes(View child);
//Tell view hierarchy that the global view attributes need to be re-evaluated.

abstract void requestChildFocus(View child, View focused);
//Called when a child of this parent wants focus

abstract boolean requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate);
//Called when a child of this group wants a particular rectangle to be positioned onto the screen.

abstract void requestDisallowInterceptTouchEvent(boolean disallowIntercept);
//Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent(MotionEvent);.

//abstract void requestFitSystemWindows();
//Ask that a new dispatch of View.fitSystemWindows(Rect); be performed.

abstract void requestLayout();
//Called when something has changed which has invalidated the layout of a child of this view parent.

abstract boolean requestSendAccessibilityEvent(View child, AccessibilityEvent event);
//Called by a child to request from its parent to send an AccessibilityEvent.

//abstract void requestTransparentRegion(View child);
//Called when a child wants the view hierarchy to gather and report transparent regions to the window compositor.

//abstract boolean showContextMenuForChild(View originalView);
//Bring up a context menu for the specified view or its ancestors.

//abstract ActionMode startActionModeForChild(View originalView, ActionMode.Callback callback);
//Start an action mode for the specified view.
}

class Window {

static final int FEATURE_LEFT_ICON;
static final int FEATURE_NO_TITLE;
static final int FEATURE_INDETERMINATE_PROGRESS;

abstract void addContentView(@Sink(DISPLAY) View view, ViewGroup.LayoutParams params);
//Variation on setContentView(View, android.view.ViewGroup.LayoutParams); to add an additional content view to the screen.

void addFlags(int flags);
//Convenience function to set the flag bits as specified in flags, as per setFlags(int, int);.

void clearFlags(int flags);
//Convenience function to clear the flag bits as specified in flags, as per setFlags(int, int);.

abstract void closeAllPanels();

abstract void closePanel(int featureId);

View findViewById(int id);
//Finds a view that was identified by the id attribute from the XML that was processed in onCreate(Bundle);.

final WindowManager.LayoutParams getAttributes();
//Retrieve the current window attributes associated with this panel.

final Window.Callback getCallback();
//Return the current Callback interface for this window.

final Window getContainer();
//Return the container for this Window.

final Context getContext();
//Return the Context this window policy is running in, for retrieving resources and other information.

abstract View getCurrentFocus();
//Return the view in this Window that currently has focus, or null if there are none.

abstract View getDecorView();
//Retrieve the top-level window decor view (containing the standard window frame/decorations and the client's content inside of that);, which can be added as a window to the window manager.

abstract LayoutInflater getLayoutInflater();
//Quick access to the LayoutInflater instance that this Window retrieved from its Context.

abstract int getVolumeControlStream();

WindowManager getWindowManager();
//Return the window manager allowing this Window to display its own windows.

final TypedArray getWindowStyle();
//Return the Window attributes from this window's theme.

final boolean hasChildren();

boolean hasFeature(int feature);
//Query for the availability of a certain feature.

abstract void invalidatePanelMenu(int featureId);

final boolean isActive();

abstract boolean isFloating();
//Return whether this window is being displayed with a floating style (based on the windowIsFloating attribute in the style/theme);.

abstract boolean isShortcutKey(int keyCode, KeyEvent event);
//Is a keypress one of the defined shortcut keys for this window.

final void makeActive();

abstract void onConfigurationChanged(Configuration newConfig);
//Should be called when the configuration is changed.

abstract void openPanel(int featureId, KeyEvent event);

abstract View peekDecorView();
//Retrieve the current decor view, but only if it has already been created; otherwise returns null.

abstract boolean performContextMenuIdentifierAction(int id, int flags);

abstract boolean performPanelIdentifierAction(int featureId, int id, int flags);

abstract boolean performPanelShortcut(int featureId, int keyCode, KeyEvent event, int flags);

boolean requestFeature(int featureId);
//Enable extended screen features.

abstract void restoreHierarchyState(Bundle savedInstanceState);

abstract Bundle saveHierarchyState();

void setAttributes(WindowManager.LayoutParams a);
//Specify custom window attributes.

abstract void setBackgroundDrawable(Drawable drawable);
//Change the background of this window to a custom Drawable.

void setBackgroundDrawableResource(int resid);
//Change the background of this window to a Drawable resource.

void setCallback(Window.Callback callback);
//Set the Callback interface for this window, used to intercept key events and other dynamic operations in the window.

abstract void setChildDrawable(int featureId, Drawable drawable);

abstract void setChildInt(int featureId, int value);

void setContainer(Window container);
//Set the container for this window.

abstract void setContentView(@Sink(DISPLAY) View view);
//Convenience for setContentView(View, android.view.ViewGroup.LayoutParams); set the screen content to an explicit view.

abstract void setContentView(int layoutResID);
//Convenience for setContentView(View, android.view.ViewGroup.LayoutParams); to set the screen content from a layout resource.

abstract void setContentView(@Sink(DISPLAY) View view, ViewGroup.LayoutParams params);
//Set the screen content to an explicit view.

void setDimAmount(float amount);
//Set the amount of dim behind the window when using FLAG_DIM_BEHIND.

abstract void setFeatureDrawable(int featureId, Drawable drawable);
//Set an explicit Drawable value for feature of this window.

abstract void setFeatureDrawableAlpha(int featureId, int alpha);
//Set a custom alpha value for the given drawale feature, controlling how much the background is visible through it.

abstract void setFeatureDrawableResource(int featureId, int resId);
//Set the value for a drawable feature of this window, from a resource identifier.

abstract void setFeatureDrawableUri(int featureId, Uri uri);
//Set the value for a drawable feature of this window, from a URI.

abstract void setFeatureInt(int featureId, int value);
//Set the integer value for a feature.

void setFlags(int flags, int mask);
//Set the flags of the window, as per the WindowManager.LayoutParams flags.

void setFormat(int format);
//Set the format of window, as per the PixelFormat types.

void setGravity(int gravity);
//Set the gravity of the window, as per the Gravity constants.

void setLayout(int width, int height);
//Set the width and height layout parameters of the window.

void setSoftInputMode(int mode);
//Specify an explicit soft input mode to use for the window, as per WindowManager.LayoutParams.softInputMode.

abstract void setTitle(CharSequence title);

abstract void setTitleColor(int textColor);

void setType(int type);
//Set the type of the window, as per the WindowManager.LayoutParams types.

void setUiOptions(int uiOptions);
//Set extra options that will influence the UI for this window.

void setUiOptions(int uiOptions, int mask);
//Set extra options that will influence the UI for this window.

abstract void setVolumeControlStream(int streamType);

void setWindowAnimations(int resId);
//Specify custom animations to use for the window, as per WindowManager.LayoutParams.windowAnimations.

void setWindowManager(WindowManager wm, IBinder appToken, String appName, boolean hardwareAccelerated);
//Set the window manager for use by this Window to, for example, display panels.

void setWindowManager(WindowManager wm, IBinder appToken, String appName);
//Set the window manager for use by this Window to, for example, display panels.

abstract boolean superDispatchGenericMotionEvent(MotionEvent event);
//Used by custom windows, such as Dialog, to pass the generic motion event further down the view hierarchy.

abstract boolean superDispatchKeyEvent(@Source(USER_INPUT) KeyEvent event);
//Used by custom windows, such as Dialog, to pass the key press event further down the view hierarchy.

abstract boolean superDispatchKeyShortcutEvent(@Source(USER_INPUT) KeyEvent event);
//Used by custom windows, such as Dialog, to pass the key shortcut press event further down the view hierarchy.

abstract boolean superDispatchTouchEvent(MotionEvent event);
//Used by custom windows, such as Dialog, to pass the touch screen event further down the view hierarchy.

abstract boolean superDispatchTrackballEvent(MotionEvent event);
//Used by custom windows, such as Dialog, to pass the trackball event further down the view hierarchy.

abstract void takeInputQueue(InputQueue.Callback callback);
//Take ownership of this window's InputQueue.

abstract void takeKeyEvents(boolean get);
//Request that key events come to this activity.

abstract void takeSurface(SurfaceHolder.Callback2 callback);
//Take ownership of this window's surface.

abstract void togglePanel(int featureId, KeyEvent event);


//Protected Methods
final int getFeatures();
//Return the feature bits that are enabled.

final int getForcedWindowFlags();
//Return the window flags that have been explicitly set by the client, so will not be modified by getDecorView();.

final int getLocalFeatures();
//Return the feature bits that are being implemented by this Window.

final boolean hasSoftInputMode();
//Has the app specified their own soft input mode?

abstract void onActive();

void setDefaultWindowFormat(int format);
//Set the default format of window, as per the PixelFormat types.

    
}

class Window$Callback{
        boolean onSearchRequested();
        void onWindowFocusChanged(boolean arg0);
        boolean onMenuItemSelected(int arg0, MenuItem arg1);
        boolean dispatchKeyEvent(KeyEvent arg0);
}

class WindowManager {
    
    
abstract Display getDefaultDisplay();
//Returns the Display upon which this WindowManager instance will create new windows.

abstract void removeViewImmediate(View view);
//Special variation of removeView(View); that immediately invokes the given view hierarchy's View.onDetachedFromWindow(); methods before returning.



}

class WindowManager$LayoutParams {
        final int FLAG_ALT_FOCUSABLE_IM;
        IBinder token;
        final int TYPE_APPLICATION_ATTACHED_DIALOG;
        int type;
        static final int FLAG_FULLSCREEN;
        static final int FLAG_FORCE_NOT_FULLSCREEN;
        static final int FLAG_KEEP_SCREEN_ON;
        static final int FLAG_NOT_TOUCHABLE;
        int gravity;
        static final int FLAG_NOT_FOCUSABLE;
        static final int TYPE_APPLICATION;
        int x;
        int y;
        LayoutParams(int w, int h, int _type, int _flags, int _format);
}

package android.view.accessibility;

class AccessibilityManager {
boolean addAccessibilityStateChangeListener(AccessibilityStateChangeListener listener);
boolean isEnabled();
boolean isTouchExplorationEnabled();
boolean removeAccessibilityStateChangeListener(AccessibilityStateChangeListener listener);
List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(int feedbackTypeFlags);
List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList();
void sendAccessibilityEvent(AccessibilityEvent event);
}

class AccessibilityNodeInfo {
static AccessibilityNodeInfo obtain(View source);
static AccessibilityNodeInfo obtain(View root, int virtualDescendantId);
static AccessibilityNodeInfo obtain();
static AccessibilityNodeInfo obtain(AccessibilityNodeInfo info);
void setSource(View source);
void setSource(View root, int virtualDescendantId);
void setParent(View parent);
void setParent(View root, int virtualDescendantId);
boolean performAction(int action);
boolean performAction(int action, Bundle arguments);
void addChild(View child);
void addChild(View root, int virtualDescendantId);
void setVisibleToUser(boolean visibleToUser);
void setText(CharSequence text);
void setSelected(boolean selected);
void setScrollable(boolean scrollable);
void setPassword(boolean password);
void setPackageName(CharSequence packageName);
void setMovementGranularities(int granularities);
void setLongClickable(boolean longClickable);
void setFocused(boolean focused);
void setFocusable(boolean focusable);
void setEnabled(boolean enabled);
void setContentDescription(CharSequence contentDescription);
void setClickable(boolean clickable);
void setClassName(CharSequence className);
void setChecked(boolean checked);
void setCheckable(boolean checkable);
void setBoundsInScreen(Rect bounds);
void setBoundsInParent(Rect bounds);
void setAccessibilityFocused(boolean focused);
void recycle();
boolean isVisibleToUser();
boolean isSelected();
boolean isScrollable();
boolean isPassword();
boolean isLongClickable();
boolean isFocused();
boolean isFocusable();
boolean isEnabled();
boolean isClickable();
boolean isChecked();
boolean isCheckable();
boolean isAccessibilityFocused();
int getWindowId();
CharSequence getText();
AccessibilityNodeInfo getParent();
CharSequence getPackageName();
int getMovementGranularities();
CharSequence getContentDescription();
CharSequence getClassName();
int getChildCount();
AccessibilityNodeInfo getChild(int index);
void getBoundsInScreen(Rect outBounds);
void getBoundsInParent(Rect outBounds);
int getActions();
AccessibilityNodeInfo focusSearch(int direction);
AccessibilityNodeInfo findFocus(int focus);
List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(String text);
void addAction(int action);
void setViewIdResourceName(String viewIdResName);
void setLiveRegion(int mode);
String getViewIdResourceName();
int getLiveRegion();
}

class AccessibilityEvent{
        CharSequence getPackageName();
        
        AccessibilityRecord getRecord(int index);
int getEventType();
int getRecordCount();
static AccessibilityEvent obtain();
static AccessibilityEvent obtain(AccessibilityEvent event);
static AccessibilityEvent obtain(int eventType);
void appendRecord(AccessibilityRecord record);
void setPackageName(CharSequence packageName);
}

class AccessibilityManager$AccessibilityStateChangeListener{
        void onAccessibilityStateChanged(boolean arg0);
}

class AccessibilityRecord{
        Parcelable getParcelableData();
        List<CharSequence> getText();
        
        AccessibilityNodeInfo getSource();
boolean isChecked();
boolean isEnabled();
boolean isFullScreen();
boolean isPassword();
boolean isScrollable();
CharSequence getBeforeText();
CharSequence getClassName();
CharSequence getContentDescription();
CharSequence getContentDescription();
int getAddedCount();
int getCurrentItemIndex();
int getFromIndex();
int getItemCount();
int getMaxScrollX();
int getMaxScrollY();
int getRemovedCount();
int getScrollX();
int getScrollY();
int getToIndex();
int getWindowId();
static AccessibilityRecord obtain();
static AccessibilityRecord obtain(AccessibilityRecord record);
void recycle();
void setAddedCount(int addedCount);
void setBeforeText(CharSequence beforeText);
void setChecked(boolean isChecked);
void setClassName(CharSequence className);
void setClassName(CharSequence className);
void setContentDescription(CharSequence contentDescription);
void setCurrentItemIndex(int currentItemIndex);
void setEnabled(boolean isEnabled);
void setEnabled(boolean isEnabled);
void setFromIndex(int fromIndex);
void setFullScreen(boolean isFullScreen);
void setItemCount(int itemCount);
void setMaxScrollX(int maxScrollX);
void setMaxScrollY(int maxScrollY);
void setParcelableData(Parcelable parcelableData);
void setPassword(boolean isPassword);
void setRemovedCount(int removedCount);
void setScrollable(boolean scrollable);
void setScrollX(int scrollX);
void setScrollY(int scrollY);
void setSource(View root, int virtualDescendantId);
void setSource(View source);
void setToIndex(int toIndex);
}

package android.view.animation;
class Animation{
        void setDuration(long durationMillis);
        void setStartOffset(long startOffset);
}
class AlphaAnimation{
        AlphaAnimation(float fromAlpha, float toAlpha);
}
class AnimationSet{
        void setFillAfter(boolean fillAfter);
        AnimationSet(boolean shareInterpolator);
        void addAnimation(Animation a);
}

class AnimationUtils{
        static long currentAnimationTimeMillis();
}

class DecelerateInterpolator{
        DecelerateInterpolator(float factor);
}

class RotateAnimation {
    RotateAnimation(Context context, AttributeSet attrs);
    RotateAnimation(float fromDegrees, float toDegrees);
    RotateAnimation(float fromDegrees, float toDegrees, float pivotX, float pivotY);
    RotateAnimation(float fromDegrees, float toDegrees, int pivotXType, float pivotXValue, int pivotYType, float pivotYValue);
}

class LinearInterpolator {
    LinearInterpolator();
    public LinearInterpolator(Context context, AttributeSet attrs);
    public float getInterpolation(float input);
}


package android.view.inputmethod;

class ExtractedText{
        int selectionEnd;
        ExtractedText();
        int selectionStart;
        int flags;
        @Source(USER_INPUT) CharSequence text;
        int partialStartOffset;
        int startOffset;
        int partialEndOffset;
}
class ExtractedTextRequest{
    ExtractedTextRequest();
    int token;
}
class InputMethodManager{
        static final int SHOW_FORCED;
}
class EditorInfo{
        static final int IME_ACTION_NONE;
        static final int IME_ACTION_UNSPECIFIED;
        int imeOptions;
        CharSequence actionLabel;
        int inputType;
        final int IME_ACTION_SEND;
        final int IME_NULL;
}

interface InputConnection {
    boolean beginBatchEdit();
    boolean endBatchEdit();
    boolean clearMetaKeyStates(@Sink(ANY) int arg0);
    boolean commitCompletion(@Sink(ANY) CompletionInfo arg0);
    boolean commitCorrection(@Sink(ANY) CorrectionInfo arg0);
    boolean commitText(@Source(USER_INPUT) CharSequence arg0, @Sink(ANY) int arg1);
    boolean deleteSurroundingText(@Sink(ANY) int arg0, @Sink(ANY) int arg1);
    boolean finishComposingText();
    int getCursorCapsMode(@Sink(ANY) int arg0);
    ExtractedText getExtractedText(@Sink(ANY) ExtractedTextRequest arg0, @Sink(ANY) int arg1);
    @Source(USER_INPUT) CharSequence getTextBeforeCursor(@Sink(ANY) int arg0, @Sink(ANY) int arg1);
    @Source(USER_INPUT) CharSequence getSelectedText(@Sink(ANY) int arg0);
    @Source(USER_INPUT) CharSequence getTextAfterCursor(@Sink(ANY) int arg0, @Sink(ANY) int arg1);
    boolean performEditorAction(@Sink(ANY) int arg0);
    boolean performContextMenuAction(@Sink(ANY) int arg0);
    boolean performPrivateCommand(@Sink(ANY) String arg0, @Sink(ANY) Bundle arg1);
    boolean setComposingText( @Source(USER_INPUT) CharSequence arg0, @Sink(ANY) int arg1);
    boolean setComposingRegion(@Sink(ANY) int arg0, @Sink(ANY) int arg1);
    boolean setSelection(@Sink(ANY) int arg0, @Sink(ANY) int arg1);
    boolean sendKeyEvent(@Sink(ANY) KeyEvent arg0);
    boolean reportFullscreenMode(@Sink(ANY) boolean arg0);
}
class BaseInputConnection implements InputConnection {
    BaseInputConnection( View arg0,  boolean arg1);
    static void removeComposingSpans(@Sink(ANY) Spannable arg0);
    static void setComposingSpans(@Sink(ANY) Spannable arg0);
    static int getComposingSpanStart(@Sink(ANY) Spannable arg0);
    static int getComposingSpanEnd(@Sink(ANY) Spannable arg0);
    Editable getEditable();
    boolean beginBatchEdit();
    boolean endBatchEdit();
    boolean clearMetaKeyStates(@Sink(ANY) int arg0);
    boolean commitCompletion(@Sink(ANY) CompletionInfo arg0);
    boolean commitCorrection(@Sink(ANY) CorrectionInfo arg0);
    boolean commitText(@Source(USER_INPUT) CharSequence arg0, @Sink(ANY) int arg1);
    boolean deleteSurroundingText(@Sink(ANY) int arg0, @Sink(ANY) int arg1);
    boolean finishComposingText();
    int getCursorCapsMode(@Sink(ANY) int arg0);
    @Source(USER_INPUT) ExtractedText getExtractedText(@Sink(ANY) ExtractedTextRequest arg0, @Sink(ANY) int arg1);
    @Source(USER_INPUT) CharSequence getTextBeforeCursor(@Sink(ANY) int arg0, @Sink(ANY) int arg1);
    @Source(USER_INPUT) CharSequence getSelectedText(@Sink(ANY) int arg0);
    @Source(USER_INPUT) CharSequence getTextAfterCursor(@Sink(ANY) int arg0, @Sink(ANY) int arg1);
    boolean performEditorAction(@Sink(ANY) int arg0);
    boolean performContextMenuAction(@Sink(ANY) int arg0);
    boolean performPrivateCommand(@Sink(ANY) String arg0, @Sink(ANY) Bundle arg1);
    boolean setComposingText( @Source(USER_INPUT) CharSequence arg0, @Sink(ANY) int arg1);
    boolean setComposingRegion(@Sink(ANY) int arg0, @Sink(ANY) int arg1);
    boolean setSelection(@Sink(ANY) int arg0, @Sink(ANY) int arg1);
    boolean sendKeyEvent(@Source(USER_INPUT) KeyEvent arg0);
    boolean reportFullscreenMode(@Sink(ANY) boolean arg0);
}
class CompletionInfo {
    
int describeContents();
//Describe the kinds of special objects contained in this Parcelable's marshalled representation.

long getId();
//Return the abstract identifier for this completion, typically corresponding to the id associated with it in the original adapter.

CharSequence getLabel();
//Return the user-visible label for the completion, or null if the plain text should be shown.

int getPosition();
//Return the original position of this completion, typically corresponding to its position in the original adapter.

CharSequence getText();
//Return the actual text associated with this completion.

String toString();
//Returns a string containing a concise, human-readable description of this object.

void writeToParcel(Parcel dest, int flags);
//Used to package this object into a Parcel.



}



class InputConnection {
    
abstract boolean beginBatchEdit();
//Tell the editor that you are starting a batch of editor operations.

abstract boolean clearMetaKeyStates(int states);
//Clear the given meta key pressed states in the given input connection.

abstract boolean commitCompletion(CompletionInfo text);
//Commit a completion the user has selected from the possible ones previously reported to InputMethodSession.displayCompletions();.

abstract boolean commitCorrection(CorrectionInfo correctionInfo);
//Commit a correction automatically performed on the raw user's input.

abstract boolean commitText(CharSequence text, int newCursorPosition);
//Commit text to the text box and set the new cursor position.

abstract boolean deleteSurroundingText(int beforeLength, int afterLength);
//Delete beforeLength characters of text before the current cursor position, and delete afterLength characters of text after the current cursor position, excluding composing text.

abstract boolean endBatchEdit();
//Tell the editor that you are done with a batch edit previously initiated with beginBatchEdit();.

abstract boolean finishComposingText();
//Have the text editor finish whatever composing text is currently active.

abstract int getCursorCapsMode(int reqModes);
//Retrieve the current capitalization mode in effect at the current cursor position in the text.

abstract ExtractedText getExtractedText(ExtractedTextRequest request, int flags);
//Retrieve the current text in the input connection's editor, and monitor for any changes to it.

abstract CharSequence getSelectedText(int flags);
//Gets the selected text, if any.

abstract CharSequence getTextAfterCursor(int n, int flags);
//Get n characters of text after the current cursor position.

abstract CharSequence getTextBeforeCursor(int n, int flags);
//Get n characters of text before the current cursor position.

abstract boolean performContextMenuAction(int id);
//Perform a context menu action on the field.

abstract boolean performEditorAction(int editorAction);
//Have the editor perform an action it has said it can do.

abstract boolean performPrivateCommand(String action, Bundle data);
//API to send private commands from an input method to its connected editor.

abstract boolean reportFullscreenMode(boolean enabled);
//Called by the IME to tell the client when it switches between fullscreen and normal modes.

abstract boolean sendKeyEvent(KeyEvent event);
//Send a key event to the process that is currently attached through this input connection.

abstract boolean setComposingRegion(int start, int end);
//Mark a certain region of text as composing text.

abstract boolean setComposingText(CharSequence text, int newCursorPosition);
//Set composing text around the current cursor position with the given text, and set the new cursor position.

abstract boolean setSelection(int start, int end);
//Set the selection of the text editor.


}

class InputMethodManager {
    
void displayCompletions(View view, CompletionInfo[] completions);

InputMethodSubtype getCurrentInputMethodSubtype();
//Returns the current input method subtype.

List<InputMethodInfo> getEnabledInputMethodList();

List<InputMethodSubtype> getEnabledInputMethodSubtypeList(InputMethodInfo imi, boolean allowsImplicitlySelectedSubtypes);
//Returns a list of enabled input method subtypes for the specified input method info.

List<InputMethodInfo> getInputMethodList();

InputMethodSubtype getLastInputMethodSubtype();

Map<InputMethodInfo, List<InputMethodSubtype>> getShortcutInputMethodsAndSubtypes();
//Returns a map of all shortcut input method info and their subtypes.

void hideSoftInputFromInputMethod(IBinder token, int flags);
//Close/hide the input method's soft input area, so the user no longer sees it or can interact with it.

boolean hideSoftInputFromWindow(IBinder windowToken, int flags);
//Synonym for hideSoftInputFromWindow(IBinder, int, ResultReceiver); without a result: request to hide the soft input window from the context of the window that is currently accepting input.

boolean hideSoftInputFromWindow(IBinder windowToken, int flags, ResultReceiver resultReceiver);
//Request to hide the soft input window from the context of the window that is currently accepting input.

void hideStatusIcon(IBinder imeToken);

boolean isAcceptingText();
//Return true if the currently served view is accepting full text edits.

boolean isActive(View view);
//Return true if the given view is the currently active view for the input method.

boolean isActive();
//Return true if any view is currently active in the input method.

boolean isFullscreenMode();
//Allows you to discover whether the attached input method is running in fullscreen mode.

boolean isWatchingCursor(View view);
//Returns true if the current input method wants to watch the location of the input editor's cursor in its window.

void restartInput(View view);
//If the input method is currently connected to the given view, restart it with its new contents.

void sendAppPrivateCommand(View view, String action, Bundle data);
//Call InputMethodSession.appPrivateCommand(); on the current Input Method.

void setAdditionalInputMethodSubtypes(String imiId, InputMethodSubtype[] subtypes);
//Set additional input method subtypes.

boolean setCurrentInputMethodSubtype(InputMethodSubtype subtype);
//Switch to a new input method subtype of the current input method.

void setInputMethod(IBinder token, String id);
//Force switch to a new input method component.

void setInputMethodAndSubtype(IBinder token, String id, InputMethodSubtype subtype);
//Force switch to a new input method and subtype.

void showInputMethodAndSubtypeEnabler(String imiId);
//Show the settings for enabling subtypes of the specified input method.

void showInputMethodPicker();

boolean showSoftInput(View view, int flags, ResultReceiver resultReceiver);
//Explicitly request that the current input method's soft input area be shown to the user, if needed.

boolean showSoftInput(View view, int flags);
//Synonym for showSoftInput(View, int, ResultReceiver); without a result receiver: explicitly request that the current input method's soft input area be shown to the user, if needed.

void showSoftInputFromInputMethod(IBinder token, int flags);
//Show the input method's soft input area, so the user sees the input method window and can interact with it.

void showStatusIcon(IBinder imeToken, String packageName, int iconId);

boolean switchToLastInputMethod(IBinder imeToken);
//Force switch to the last used input method and subtype.

boolean switchToNextInputMethod(IBinder imeToken, boolean onlyCurrentIme);
//Force switch to the next input method and subtype.

void toggleSoftInput(int showFlags, int hideFlags);

void toggleSoftInputFromWindow(IBinder windowToken, int showFlags, int hideFlags);
//This method toggles the input method window display.

void updateCursor(View view, int left, int top, int right, int bottom);
//Report the current cursor location in its window.

void updateExtractedText(View view, int token, ExtractedText text);

void updateSelection(View view, int selStart, int selEnd, int candidatesStart, int candidatesEnd);
//Report the current selection range.

void viewClicked(View view);
//Notify the event when the user tapped or clicked the text view.



}

class InputMethodSubtype {
    
    
boolean containsExtraValueKey(String key);
//The string of ExtraValue in subtype should be defined as follows: example: key0,key1=value1,key2,key3,key4=value4

int describeContents();
//Describe the kinds of special objects contained in this Parcelable's marshalled representation.

boolean equals(Object o);
//Compares this instance with the specified object and indicates if they are equal.

CharSequence getDisplayName(Context context, String packageName, ApplicationInfo appInfo);

String getExtraValue();

String getExtraValueOf(String key);
//The string of ExtraValue in subtype should be defined as follows: example: key0,key1=value1,key2,key3,key4=value4

int getIconResId();

String getLocale();

String getMode();

int getNameResId();

int hashCode();
//Returns an integer hash code for this object.

boolean isAuxiliary();

boolean overridesImplicitlyEnabledSubtype();

void writeToParcel(Parcel dest, int parcelableFlags);
//Flatten this object in to a Parcel.



}
