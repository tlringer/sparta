package android.media;

class AudioTrack {
    static final int ERROR;
    static final int ERROR_BAD_VALUE;
    static final int ERROR_INVALID_OPERATION;
    static final int MODE_STATIC;
    static final int MODE_STREAM;
    static final int PLAYSTATE_PAUSED;
    static final int PLAYSTATE_PLAYING;
    static final int PLAYSTATE_STOPPED;
    static final int STATE_INITIALIZED;
    static final int STATE_NO_STATIC_DATA;
    static final int STATE_UNINITIALIZED;
    static final int SUCCESS;
    static final int WRITE_BLOCKING;
    static final int WRITE_NON_BLOCKING;
    AudioTrack(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) throws IllegalArgumentException;
    AudioTrack(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6) throws IllegalArgumentException;
    AudioTrack(AudioAttributes arg0, AudioFormat arg1, int arg2, int arg3, int arg4) throws IllegalArgumentException;
    void release();
    protected void finalize();
    static float getMinVolume();
    static float getMaxVolume();
    int getSampleRate();
    int getPlaybackRate();
    int getAudioFormat();
    int getStreamType();
    int getChannelConfiguration();
    int getChannelCount();
    int getState();
    int getPlayState();
    protected int getNativeFrameCount();
    int getNotificationMarkerPosition();
    int getPositionNotificationPeriod();
    int getPlaybackHeadPosition();
    static int getNativeOutputSampleRate(int arg0);
    static int getMinBufferSize(int arg0, int arg1, int arg2);
    int getAudioSessionId();
    boolean getTimestamp(AudioTimestamp arg0);
    void setPlaybackPositionUpdateListener(OnPlaybackPositionUpdateListener arg0);
    void setPlaybackPositionUpdateListener(OnPlaybackPositionUpdateListener arg0, Handler arg1);
    int setStereoVolume(float arg0, float arg1);
    int setVolume(float arg0);
    int setPlaybackRate(int arg0);
    int setNotificationMarkerPosition(int arg0);
    int setPositionNotificationPeriod(int arg0);
    int setPlaybackHeadPosition(int arg0);
    int setLoopPoints(int arg0, int arg1, int arg2);
    protected void setState(int arg0);
    void play() throws IllegalStateException;
    void stop() throws IllegalStateException;
    void pause() throws IllegalStateException;
    void flush();
    int write(@Sink(SPEAKER) byte[] arg0, int arg1, int arg2);
    int write(@Sink(SPEAKER)  short[] arg0, int arg1, int arg2);
    int write(@Sink(SPEAKER)  float[] arg0, int arg1, int arg2, int arg3);
    int write(@Sink(SPEAKER) ByteBuffer arg0, int arg1, int arg2);
    int reloadStaticData();
    int attachAuxEffect(int arg0);
    int setAuxEffectSendLevel(float arg0);
}

class FaceDetector {
@PolyFlow int findFaces(Bitmap bitmap, Face[] faces);
}

class FaceDetector$Face {
void getMidPoint(PointF point);
}

class MediaMetadataRetriever {
String extractMetadata(int arg0);
void setDataSource(Context context, Uri uri) throws IllegalArgumentException,SecurityException;
void setDataSource(FileDescriptor arg0, long arg1, long arg2) throws IllegalArgumentException;
void setDataSource(FileDescriptor fd) throws IllegalArgumentException;
void setDataSource(String path) throws IllegalArgumentException;
void setDataSource(String uri, Map<String,String> headers) throws IllegalArgumentException;
}

class RemoteControlClient {
void setOnGetPlaybackPositionListener(OnGetPlaybackPositionListener l);
void setPlaybackPositionUpdateListener(OnPlaybackPositionUpdateListener l);
void setPlaybackState(int state, long timeInMs, float playbackSpeed);
void setPlaybackState(int state);
void setTransportControlFlags(int transportControlFlags);
}

class AudioManager{

static final int STREAM_MUSIC;
final int STREAM_RING;
final int RINGER_MODE_NORMAL;
final int RINGER_MODE_SILENT;
final int RINGER_MODE_VIBRATE;

void setRingerMode(@Sink(SPEAKER) int ringerMode);
        int getStreamVolume(int streamType);
        int getStreamMaxVolume(int streamType);
        void setStreamVolume(int streamType, @Sink(SPEAKER) int index, int flags);
        int getRingerMode();
        int abandonAudioFocus(@Sink(SPEAKER) OnAudioFocusChangeListener l);
        int requestAudioFocus(@Sink(SPEAKER) OnAudioFocusChangeListener l, int streamType, int durationHint);
        
        int getMode();
void adjustStreamVolume(int streamType, int direction, int flags);
void registerMediaButtonEventReceiver(ComponentName eventReceiver);
void registerMediaButtonEventReceiver(PendingIntent eventReceiver);
void registerRemoteControlClient(RemoteControlClient rcClient);
void unregisterMediaButtonEventReceiver(ComponentName eventReceiver);
void unregisterMediaButtonEventReceiver(PendingIntent eventReceiver);
void unregisterRemoteControlClient(RemoteControlClient rcClient);
}

class AudioRecord {
        int setPositionNotificationPeriod(int periodInFrames);
        void setRecordPositionUpdateListener(OnRecordPositionUpdateListener listener);
        static int getMinBufferSize(int sampleRateInHz, int channelConfig, int audioFormat);
        int getState();
        void stop() throws IllegalStateException;
        @AddsSourceData
        int read(@Source(RECORD_AUDIO) byte[] audioData, int offsetInBytes, int sizeInBytes);
        void release();
        AudioRecord(int audioSource, int sampleRateInHz, int channelConfig, int audioFormat, int bufferSizeInBytes) throws IllegalArgumentException;
        void startRecording() throws IllegalStateException;
        
        @AddsSourceData
        int read(@Source(RECORD_AUDIO) ByteBuffer audioBuffer, int sizeInBytes);
        @AddsSourceData
int read(@Source(RECORD_AUDIO) short[] audioData, int offsetInShorts, int sizeInShorts);
void startRecording(MediaSyncEvent syncEvent) throws IllegalStateException;
}

class AudioRecord$OnRecordPositionUpdateListener{
        void onPeriodicNotification(AudioRecord arg0);
        void onMarkerReached(AudioRecord arg0);
}

class CamcorderProfile {
    
    
static CamcorderProfile get(int quality);
//Returns the camcorder profile for the first back-facing camera on the device at the given quality level.

static CamcorderProfile get(int cameraId, int quality);
//Returns the camcorder profile for the given camera at the given quality level.

static boolean hasProfile(int quality);
//Returns true if camcorder profile exists for the first back-facing camera at the given quality level.

static boolean hasProfile(int cameraId, int quality);
//Returns true if camcorder profile exists for the given camera at the given quality level.



}

class ExifInterface {
    // Added by mcarthur
    @Source({READ_EXTERNAL_STORAGE}) 
    String getAttribute(@Sink({}) String tag);

    ExifInterface(@Sink(FILESYSTEM) String path);
    void setAttribute(String tag, String value);
    static final int ORIENTATION_ROTATE_270;
        static final String TAG_ORIENTATION;
        static final int ORIENTATION_ROTATE_180;
        static final int ORIENTATION_NORMAL;
        static final int ORIENTATION_ROTATE_90;
      @Source(READ_EXTERNAL_STORAGE) int getAttributeInt(String tag, int defaultValue);
}

class MediaPlayer {
        int getCurrentPosition();
        void seekTo(int arg0) throws IllegalStateException;
        int getDuration();
        boolean isPlaying();
        void release();
        void stop() throws IllegalStateException;
        void reset();
        void pause() throws IllegalStateException;
        void setOnPreparedListener(OnPreparedListener listener);
        void setLooping(boolean arg0);
        void setDataSource(@Sink(SPEAKER) String arg0) throws IOException,IllegalArgumentException,SecurityException,IllegalStateException;
        void start() throws IllegalStateException;
        void prepare() throws IOException,IllegalStateException;
        MediaPlayer();
        void setDataSource(Context context, @Sink(SPEAKER) Uri uri) throws IOException,IllegalArgumentException,SecurityException,IllegalStateException;
        
        static MediaPlayer create(Context context, int resid);
static MediaPlayer create(Context context, Uri uri, SurfaceHolder holder);
static MediaPlayer create(Context context, Uri uri);
void setAudioStreamType(int arg0);
void setDataSource(Context context, @Sink(SPEAKER) Uri uri, Map<String,String> headers) throws IOException,IllegalArgumentException,SecurityException,IllegalStateException;
void setDataSource(@Sink(SPEAKER) FileDescriptor fd, long offset, long length) throws IOException,IllegalArgumentException,IllegalStateException;
void setDataSource(@Sink(SPEAKER) FileDescriptor fd) throws IOException,IllegalArgumentException,IllegalStateException;
void setOnCompletionListener(OnCompletionListener listener);
void setOnErrorListener(OnErrorListener listener);
void setOnInfoListener(OnInfoListener listener);
void setWakeMode(Context context, int mode);
}

class MediaPlayer$OnPreparedListener{
        void onPrepared(MediaPlayer arg0);
}
class MediaPlayer$OnCompletionListener{
        void onCompletion(MediaPlayer arg0);
}

class MediaRecorder {

MediaRecorder();
    
final static int getAudioSourceMax();
//Gets the maximum value for audio sources.

int getMaxAmplitude();
//Returns the maximum absolute amplitude that was sampled since the last call to this method.

void prepare();
//Prepares the recorder to begin capturing and encoding data.

void release();
//Releases resources associated with this MediaRecorder object.

void reset();
//Restarts the MediaRecorder to its idle state.

void setAudioChannels(int numChannels);
//Sets the number of audio channels for recording.

void setAudioEncoder(int audio_encoder);
//Sets the audio encoder to be used for recording.

void setAudioEncodingBitRate(int bitRate);
//Sets the audio encoding bit rate for recording.

void setAudioSamplingRate(int samplingRate);
//Sets the audio sampling rate for recording.

void setAudioSource(int audio_source);
//Sets the audio source to be used for recording.

void setCamera(Camera c);
//Sets a Camera to use for recording.

void setCaptureRate(double fps);
//Set video frame capture rate.

void setLocation(float latitude, float longitude);
//Set and store the geodata (latitude and longitude); in the output file.

void setMaxDuration(int max_duration_ms);
//Sets the maximum duration (in ms); of the recording session.

void setMaxFileSize(long max_filesize_bytes);
//Sets the maximum filesize (in bytes); of the recording session.

void setOnErrorListener(MediaRecorder.OnErrorListener l);
//Register a callback to be invoked when an error occurs while recording.

void setOnInfoListener(MediaRecorder.OnInfoListener listener);
//Register a callback to be invoked when an informational event occurs while recording.

void setOrientationHint(int degrees);
//Sets the orientation hint for output video playback.

@AddsSourceData
void setOutputFile(@Source(RECORD_AUDIO) @Sink({FILESYSTEM, WRITE_EXTERNAL_STORAGE}) FileDescriptor fd);
//Pass in the file descriptor of the file to be written.

@AddsSourceData
void setOutputFile(@Source(RECORD_AUDIO) @Sink({FILESYSTEM, WRITE_EXTERNAL_STORAGE}) String path);
//Sets the path of the output file to be produced.

void setOutputFormat(int output_format);
//Sets the format of the output file produced during recording.

void setPreviewDisplay(Surface sv);
//Sets a Surface to show a preview of recorded media (video);.

void setProfile(CamcorderProfile profile);
//Uses the settings from a CamcorderProfile object for recording.

void setVideoEncoder(int video_encoder);
//Sets the video encoder to be used for recording.

void setVideoEncodingBitRate(int bitRate);
//Sets the video encoding bit rate for recording.

void setVideoFrameRate(int rate);
//Sets the frame rate of the video to be captured.

void setVideoSize(int width, int height);
//Sets the width and height of the video to be captured.

void setVideoSource(int video_source);
//Sets the video source to be used for recording.

void start();
//Begins capturing and encoding data to the file specified with setOutputFile();.

void stop();
//Stops recording.

//Protected Methods
void finalize();
//Invoked when the garbage collector has detected that this instance is no longer reachable.



}

class Ringtone{
        boolean isPlaying();
        void play();
        void stop();
        String getTitle(Context context);
}

class RingtoneManager{

final int TYPE_RINGTONE;
        static Uri getDefaultUri(int type);
static Ringtone getRingtone(Context context, Uri ringtoneUri);
        Cursor getCursor();
        Uri getValidRingtoneUri(Context context);
int getRingtonePosition(Uri ringtoneUri);
Uri getRingtoneUri(int position);
}

class ThumbnailUtils {
    
static Bitmap createVideoThumbnail(String filePath, int kind);
//Create a video thumbnail for a video.

static Bitmap extractThumbnail(Bitmap source, int width, int height, int options);
//Creates a centered bitmap of the desired size.

static Bitmap extractThumbnail(Bitmap source, int width, int height);
//Creates a centered bitmap of the desired size.



}

